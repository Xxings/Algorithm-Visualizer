{"version":3,"sources":["Component/Card/CardImg/insertion_sort.png","Component/Card/CardImg/selection_sort.png","Component/Card/CardImg/bubble_sort.png","Component/Card/CardImg/merge_sort.png","Component/Card/CardImg/quick_sort.png","Component/Card/CardImg/heap_sort.png","Component/Card/CardImg/bfs.png","Component/Card/CardImg/dfs.png","Component/Card/CardImg/prim.png","Component/Card/CardImg/kruskal.png","Component/Card/CardImg/dijkstra.png","Footer.tsx","Component/Card/Cards.tsx","Main.tsx","Component/Sort/SortBars.tsx","Component/Sort/SortAlgorithm.ts","Component/Sort/UtilFunction.ts","Component/Sort/SortView.tsx","Component/Sort/NodeTree.tsx","Component/Sort/HeapSort.tsx","Component/Graph/GraphNodes.tsx","Component/Graph/UtilFunction.ts","Component/Graph/GraphAlgorithm.ts","Component/Graph/GraphView.tsx","Component/Graph/FixedGraphNodes.tsx","Component/Graph/FixedGraphView.tsx","Router/Routes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","contributers","index","id","url","Copyright","Typography","variant","color","align","Date","getFullYear","map","contributer","Link","key","href","useStyles","makeStyles","theme","footer","backgroundColor","palette","background","paper","padding","spacing","Footer","classes","className","gutterBottom","component","cardGrid","paddingTop","paddingBottom","card","height","display","flexDirection","cardMedia","cardContent","flexGrow","items","name","path","img","require","desc","Cards","Container","maxWidth","Grid","container","item","xs","sm","md","to","style","textDecoration","Card","CardMedia","image","title","CardContent","mainContent","Main","paragraph","SortBar","graphBars","SortBars","graphBar","position","width","value","textAlign","border","transform","length","window","innerHeight","WebkitTransition","transition","toString","marginBlockStart","marginBlockEnd","alignItems","top","mergeSort","list","keyList","arrayLength","process","push","arr","slice","targets","phase","sorted","divide","left","right","mid","Math","floor","listt","i","j","k","temp","l","m","temp2","n","merge","makeRandomList","howSorted","size","max","random","tempList","tempBar","increasing","nearlyIncreasing","decreasing","nearlyDecreasing","wholeSortProcess","processLength","sort","sortName","el","insertionSort","min","selectionSort","bubbleSort","quickSort","q","partitionLeft","partitionRight","low","high","pivot","pivotValue","partition","nodes","heapify","idx","parent","tIdx","tKey","heapify2","pop","heapSort","button","margin","playing","speed","initialization","SortView","info","console","log","pathName","location","pathname","substr","useState","toggle","setToggle","setBar","undefined","nowDepth","setNowDepth","nowPlaying","setNowPlaying","setDepth","depth","goTo","changeTo","rendering","makeRandomNumber","stop","play","useEffect","flexWrap","justifyContent","Button","onClick","IconButton","aria-label","flow","setTimeout","NodeTree","graphNodes","sortedNodes","lines","graphLength","maxDepth","log2","maxChildCnt","NodeTrees","graphNode","currentDepth","ceil","subDepth","widthInterval","innerWidth","nodeCntInCurDepth","getXPosition","getYPosition","borderRadius","visibility","zIndex","sortedNode","bottom","paintLines","line","currentDepthTo","currentDepthFrom","from","subDepthTo","subDepthFrom","widthIntervalTo","widthIntervalFrom","nodeCntInCurDepthTo","nodeCntInCurDepthFrom","positionInCurDepthTo","positionInCurDepthFrom","getXPositionTo","getYPositionTo","getXPositionFrom","getYPositionFrom","x1","y1","x2","y2","stroke","strokeWidth","HSort","tempNode","tempLine","listAndLine","setNode","graphLines","setLines","renderResult","positionX","positionY","sqrt","GraphNodes","node","stackOrQueue","fontSize","borderStyle","lineHeight","marginBottom","borderLeft","borderRight","borderBottom","makeGraph","density","len","lineKey","nodeList","connected","lineMap","Map","d","randomSet","Set","add","Array","set","concat","makeFixedGraph","type","howlong","connetion","x","y","weight","search","searchName","visited","visitedNode","visitedLine","targetLine","front","rear","targetNodes","here","hereNode","there","bfs","stack","now","flag","includes","p","dfs","find","findName","start","visitedNum","lineList","get","a","b","shift","Number","charAt","obj1","obj2","prim","child1","child2","parentArr","findParent","child","isAllSameParent","parentList","result","unionGroup","parent1","parent2","forEach","item1","item2","kruskal","table","nowMinTo","connection","nowMin","finish","next","dijkstra","wholeSearchProcess","GraphView","data","setGraphNodes","setGraphLines","setList","NList","LMap","NVisited","LVisited","NTargets","values","FixedGraphNodes","cx","cy","r","fill","textAnchor","dy","minimum","textRendering","FixedGraphView","fixedRendering","Routes","exact","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f2eb037b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/insertion_sort.6c78b011.png\";","module.exports = __webpack_public_path__ + \"static/media/selection_sort.a383c762.png\";","module.exports = __webpack_public_path__ + \"static/media/bubble_sort.a9805ee3.png\";","module.exports = __webpack_public_path__ + \"static/media/merge_sort.88fed517.png\";","module.exports = __webpack_public_path__ + \"static/media/quick_sort.9955aa9b.png\";","module.exports = __webpack_public_path__ + \"static/media/heap_sort.038346d5.png\";","module.exports = __webpack_public_path__ + \"static/media/bfs.1979018d.png\";","module.exports = __webpack_public_path__ + \"static/media/dfs.d4ddc889.png\";","module.exports = __webpack_public_path__ + \"static/media/prim.76a01e1f.png\";","module.exports = __webpack_public_path__ + \"static/media/kruskal.9ffd5a54.png\";","module.exports = __webpack_public_path__ + \"static/media/dijkstra.0bf8f90a.png\";","import React from 'react';\r\nimport {\r\n  Link, Typography, makeStyles,\r\n} from '@material-ui/core/';\r\n\r\n\r\nconst contributers = [\r\n  {\r\n    index: 0,\r\n    id: 'bcking92',\r\n    url: 'https://github.com/bcking92',\r\n  },\r\n  {\r\n    index: 1,\r\n    id: 'sunghyun6',\r\n    url: 'https://github.com/letyousmile',\r\n  },\r\n  {\r\n    index: 2,\r\n    id: 'porori',\r\n    url: 'https://github.com/ckskal3',\r\n  },\r\n];\r\nfunction Copyright(): JSX.Element {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright '}\r\n      {new Date().getFullYear()}\r\n      .\r\n      {contributers.map((contributer) => (\r\n        <Link color=\"inherit\" key={contributer.index} href={contributer.url}>\r\n          {`${contributer.id} `}\r\n        </Link>\r\n      ))}\r\n      All rights reserved.\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  footer: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(6),\r\n  },\r\n}));\r\n\r\nfunction Footer(): JSX.Element {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.footer}>\r\n      <Typography variant=\"h6\" align=\"center\" gutterBottom>\r\n        Algorithm Visualizer\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\r\n        서울특별시 강남구 역삼동 테헤란로 212\r\n      </Typography>\r\n      <Copyright />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","/* eslint-disable global-require */\r\nimport React from 'react';\r\nimport {\r\n  Card, CardContent, CardMedia, Container, Grid, Typography, makeStyles,\r\n} from '@material-ui/core/';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(8),\r\n    paddingBottom: theme.spacing(8),\r\n  },\r\n  card: {\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  cardMedia: {\r\n    paddingTop: '56.25%', // 16:9\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nconst items = [\r\n  {\r\n    index: 0,\r\n    name: '삽입정렬',\r\n    path: '/ISort',\r\n    img: require('./CardImg/insertion_sort.png'),\r\n    desc: '자료 배열의 모든 요소를 앞에서부터 차례대로 이미 정렬된 배열 부분과 비교하여,'\r\n    + '자신의 위치를 찾아 삽입함으로써 정렬을 완성하는 알고리즘입니다.',\r\n  },\r\n  {\r\n    index: 1,\r\n    name: '선택정렬',\r\n    path: '/SSort',\r\n    img: require('./CardImg/selection_sort.png'),\r\n    desc: '주어진 리스트 중에 최소값을 찾습니다. 그 값을 맨 앞에 위치한 값과 교체합니다.'\r\n    + '맨 처음 위치를 뺀 나머지 리스트를 같은 방법으로 교체합니다.',\r\n  },\r\n  {\r\n    index: 2,\r\n    name: '버블정렬',\r\n    path: '/BSort',\r\n    img: require('./CardImg/bubble_sort.png'),\r\n    desc: '두 인접한 원소를 검사하여 정렬하는 방법입니다.'\r\n    + '원소의 이동이 거품이 수면으로 올라오는 듯한 모습을 보이기 때문에 지어진 이름입니다.',\r\n  },\r\n  {\r\n    index: 3,\r\n    name: '합병정렬',\r\n    path: '/MSort',\r\n    img: require('./CardImg/merge_sort.png'),\r\n    desc: '분할정복을 이용하여 정렬하는 방법입니다.'\r\n    + '자료 배열을 작은 단위로 쪼개어 정렬하고 합치는 방식으로 작동합니다.',\r\n  },\r\n  {\r\n    index: 4,\r\n    name: '퀵정렬',\r\n    path: '/QSort',\r\n    img: require('./CardImg/quick_sort.png'),\r\n    desc: '퀵이라는 이름에서 알 수 있듯이 평균적인 상황에서 최고의 성능을 나타닙니다.'\r\n    + '피벗을 지정하여 피벗보다 큰 원소는 오른쪽으로, 작은 원소는 왼쪽으로 나누며 정렬해나갑니다.',\r\n  },\r\n  {\r\n    index: 5,\r\n    name: '힙정렬',\r\n    path: '/HSort',\r\n    img: require('./CardImg/heap_sort.png'),\r\n    desc: '최대힙, 최소힙의 첫번째 노드가 항상 최대값 또는 최소값을 가지는 성질을 이용한 정렬입니다.'\r\n    + '최대힙, 최소힙을 만들고 첫번째 노드를 pop 하는 방식으로 작동합니다.',\r\n  },\r\n  {\r\n    index: 6,\r\n    name: '너비 우선 탐색',\r\n    path: '/bfs',\r\n    img: require('./CardImg/bfs.png'),\r\n    desc: '너비 우선 탐색은 시작 정점을 방문한 후 시작 정점에 인접한 모든 정점들을 우선 방문하는 방법입니다.'\r\n    + '더 이상 방문하지 않은 정점이 없을 때까지 방문하지 않은 모든 정점들에 대해서도 너비 우선 검색을 적용합니다.',\r\n  },\r\n  {\r\n    index: 7,\r\n    name: '깊이 우선 탐색',\r\n    path: '/dfs',\r\n    img: require('./CardImg/dfs.png'),\r\n    desc: '깊이 우선 탐색은 탐색트리의 최근에 첨가된 노드를 선택하고, 트리에 다음 수준의 한 개의 자식노드를 첨가합니다.'\r\n    + '첨가된 자식 노드가 목표노드일 때까지 앞의 자식 노드의 첨가 과정을 반복해 가는 방식입니다.',\r\n  },\r\n  {\r\n    index: 8,\r\n    name: '최소 신장 트리 프림 알고리즘',\r\n    path: '/prim',\r\n    img: require('./CardImg/prim.png'),\r\n    desc: '프림 알고리즘은 가중치가 있는 연결된 무향 그래프의 모든 꼭짓점을 포함하면서 '\r\n    + '각 변의 비용의 합이 최소가 되는 부분 그래프인 트리, 즉 최소 비용 생성나무를 찾는 알고리즘입니다.',\r\n  },\r\n  {\r\n    index: 9,\r\n    name: '최소 신장 트리 크루스칼 알고리즘',\r\n    path: '/kruskal',\r\n    img: require('./CardImg/kruskal.png'),\r\n    desc: '크루스칼 알고리즘은 모든 간선을 가중치로 정렬한 후 가장 최소의 가중치를 연결해나가는 알고리즘입니다.'\r\n    + '연결할 시 사이클이 생기지 않기 위해 UNION-FIND 알고리즘을 사용하여 체크합니다.',\r\n  },\r\n  {\r\n    index: 10,\r\n    name: '최단 경로 다익스트라 알고리즘',\r\n    path: '/dijkstra',\r\n    img: require('./CardImg/dijkstra.png'),\r\n    desc: '다익스트라 알고리즘은 도로 교통망 같은 곳에서 나타날 수 있는 그래프에서 꼭짓점 간의 최단 경로를 찾는 알고리즘입니다.'\r\n    + '현재 위치에서 가장 가까운 노드를 선택 후 방문하지 않은 노드까지의 거리를 갱신해나가며 연결해나갑니다.',\r\n  },\r\n];\r\n\r\nfunction Cards(): JSX.Element {\r\n  const classes = useStyles();\r\n  return (\r\n    <Container className={classes.cardGrid} maxWidth=\"md\">\r\n      <Grid container spacing={4}>\r\n        {items.map((item) => (\r\n          <Grid item key={item.index} xs={12} sm={6} md={4}>\r\n            <Link to={item.path} style={{ textDecoration: 'none' }}>\r\n              <Card className={classes.card}>\r\n                <CardMedia\r\n                  className={classes.cardMedia}\r\n                  image={item.img}\r\n                  title=\"Image title\"\r\n                />\r\n                <CardContent className={classes.cardContent}>\r\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    {item.name}\r\n                  </Typography>\r\n                  <Typography>\r\n                    {item.desc}\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Link>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Cards;\r\n","import React from 'react';\r\nimport {\r\n  Container, Typography, makeStyles,\r\n} from '@material-ui/core/';\r\nimport Cards from './Component/Card/Cards';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  mainContent: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(8, 0, 6),\r\n  },\r\n}));\r\n\r\nfunction Main(): JSX.Element {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.mainContent}>\r\n      <Container maxWidth=\"sm\">\r\n        <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\r\n          Alogirhtm Visualizer\r\n        </Typography>\r\n        <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\r\n          어려운 알고리즘들을 눈으로 확인해보세요.\r\n        </Typography>\r\n      </Container>\r\n      <Cards />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { GraphBar } from '../../util';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction SortBar({ graphBars }: any): JSX.Element {\r\n  const SortBars = graphBars.map((graphBar: GraphBar) => (\r\n    <div\r\n      style={{\r\n        position: 'absolute',\r\n        width: '50px',\r\n        height: `${(graphBar.value * 20) + 50}px`,\r\n        backgroundColor: graphBar.color,\r\n        textAlign: 'center',\r\n        color: 'black',\r\n        border: '1px solid black',\r\n        transform: `translate(${graphBar.index * 50 - graphBars.length * 25}px, ${window.innerHeight * 0.6 + graphBar.height!}px)`,\r\n        WebkitTransition: ' -webkit-transform 0.2s',\r\n        transition: 'transform 0.2s',\r\n      }}\r\n      key={graphBar.key.toString()}\r\n    >\r\n      <h1\r\n        style={{\r\n          marginBlockStart: '0',\r\n          marginBlockEnd: '0',\r\n        }}\r\n      >\r\n        {graphBar.value}\r\n      </h1>\r\n    </div>\r\n  ));\r\n  return (\r\n    <div style={{\r\n      display: 'flex',\r\n      alignItems: 'flex-start',\r\n      flexDirection: 'column-reverse',\r\n      position: 'absolute',\r\n      top: '200px',\r\n    }}\r\n    >\r\n      {SortBars}\r\n    </div>\r\n  );\r\n}\r\n\r\nSortBar.propTypes = {\r\n  graphBars: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n};\r\nexport default SortBar;\r\n","/* eslint-disable no-param-reassign */\r\nimport { GraphBar, Process } from '../../util';\r\n\r\n// 소팅 알고리즘 진행 정도 마다 상태 기억을 위해 [배열, targets, phase]를 저장한다.\r\n// 1. 배열에는 렌더링할 div의 key값을 소팅된 순서대로 저장하고\r\n// 2. targets에는 현재 비교연산중인 index,\r\n// 3. phase에는 소팅 알고리즘이 뭘 하고있는지 저장한다.\r\n// 배열, phase, targets를 토대로 div의 색과 위치를 결정한다.\r\n// phase를 만든 것은 나중에 소팅에 대한 단계별 설명을 쓸 때 확장성있게 사용할 수 있기 때문.\r\nexport function bubbleSort(list: GraphBar[], keyList: number[]): Process[] {\r\n  const arrayLength = keyList.length;\r\n  const process: Process[] = [];\r\n  process.push({\r\n    arr: keyList.slice(), targets: [arrayLength, arrayLength], phase: 'start',\r\n  });\r\n  for (let i = 0; i < arrayLength - 1; i += 1) {\r\n    for (let j = 0; j < arrayLength - i - 1; j += 1) {\r\n      process.push({\r\n        arr: keyList.slice(), targets: [j, j + 1], phase: 'compare',\r\n      });\r\n      if (list[keyList[j + 1]].value < list[keyList[j]].value) {\r\n        const temp = keyList[j + 1];\r\n        keyList[j + 1] = keyList[j];\r\n        keyList[j] = temp;\r\n        process.push({\r\n          arr: keyList.slice(), targets: [j, j + 1], phase: 'change',\r\n        });\r\n      }\r\n    }\r\n  }\r\n  return process;\r\n}\r\nexport function selectionSort(list: GraphBar[], keyList: number[]): Process[] {\r\n  const arrayLength = keyList.length;\r\n  const process: Process[] = [];\r\n  process.push({\r\n    arr: keyList.slice(), targets: [arrayLength, arrayLength], phase: 'start',\r\n  });\r\n  for (let i = 0; i < arrayLength; i += 1) {\r\n    let min = i;\r\n    process.push({\r\n      arr: keyList.slice(), targets: [min, min], phase: 'compare',\r\n    });\r\n    for (let j = i + 1; j < arrayLength; j += 1) {\r\n      process.push({\r\n        arr: keyList.slice(), targets: [j, min], phase: 'compare',\r\n      });\r\n      if (list[keyList[min]].value > list[keyList[j]].value) {\r\n        process.push({\r\n          arr: keyList.slice(), targets: [min, j], phase: 'compare',\r\n        });\r\n        min = j;\r\n      }\r\n    }\r\n    process.push({\r\n      arr: keyList.slice(), targets: [i, min], phase: 'change',\r\n    });\r\n    [keyList[min], keyList[i]] = [keyList[i], keyList[min]]; // swap\r\n  }\r\n  process.push({\r\n    arr: keyList.slice(), targets: [], phase: 'done',\r\n  });\r\n  return process;\r\n}\r\nexport function insertionSort(list: GraphBar[], keyList: number[]): Process[] {\r\n  const arrayLength = keyList.length;\r\n  const process: Process[] = [];\r\n  process.push({\r\n    arr: keyList.slice(), targets: [arrayLength, arrayLength], phase: 'start',\r\n  });\r\n  for (let i = 1; i < arrayLength; i += 1) {\r\n    for (let j = i - 1; j >= 0; j -= 1) {\r\n      process.push({\r\n        arr: keyList.slice(), targets: [j, j + 1], phase: 'insrt-compare',\r\n      });\r\n      if (list[keyList[j + 1]].value < list[keyList[j]].value) {\r\n        const temp = keyList[j + 1];\r\n        keyList[j + 1] = keyList[j];\r\n        keyList[j] = temp;\r\n        process.push({\r\n          arr: keyList.slice(), targets: [j, j + 1], phase: 'change',\r\n        });\r\n      } else {\r\n        process.push({\r\n          arr: keyList.slice(), targets: [j, j + 1], phase: 'insert',\r\n        });\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return process;\r\n}\r\nexport function quickSort(list: GraphBar[], keyList: number[],\r\n  left: number, right: number, process: Process[]): Process[] {\r\n  function partition(partitionLeft: number, partitionRight: number): number {\r\n    let low = partitionLeft;\r\n    let high = partitionRight + 1;\r\n    const pivot = partitionLeft;\r\n    const pivotValue = list[keyList[pivot]].value;\r\n    do {\r\n      do {\r\n        low += 1;\r\n        process.push({\r\n          arr: keyList.slice(), targets: [pivot, low, high], phase: 'compare',\r\n        });\r\n      } while (low <= right && list[keyList[low]].value < pivotValue);\r\n      do {\r\n        high -= 1;\r\n        process.push({\r\n          arr: keyList.slice(), targets: [pivot, low, high], phase: 'compare',\r\n        });\r\n      } while (high >= left && list[keyList[high]].value > pivotValue);\r\n      if (low < high) {\r\n        const temp = keyList[low];\r\n        keyList[low] = keyList[high];\r\n        keyList[high] = temp;\r\n        process.push({\r\n          arr: keyList.slice(), targets: [low, high], phase: 'change',\r\n        });\r\n      }\r\n    } while (low < high);\r\n    const temp = keyList[left];\r\n    keyList[left] = keyList[high];\r\n    keyList[high] = temp;\r\n    process.push({\r\n      arr: keyList.slice(), targets: [left, high], phase: 'change',\r\n    });\r\n    return high;\r\n  }\r\n  if (left < right) {\r\n    const q = partition(left, right);\r\n    quickSort(list, keyList, left, q - 1, process);\r\n    quickSort(list, keyList, q + 1, right, process);\r\n  }\r\n  return process;\r\n}\r\n\r\nexport function mergeSort(list: GraphBar[], keyList: number[]): Process[] {\r\n  const arrayLength = keyList.length;\r\n  const process: Process[] = [];\r\n  process.push({\r\n    arr: keyList.slice(), targets: [arrayLength, arrayLength], phase: 'start',\r\n  });\r\n  const sorted = keyList.slice();\r\n\r\n  const merge = (listt: number[], left: number, mid: number, right: number): void => {\r\n    let i = left;\r\n    let j = mid + 1;\r\n    let k = left;\r\n    const temp = keyList.slice();\r\n    while (i <= mid && j <= right) {\r\n      if (list[listt[i]].value <= list[listt[j]].value) {\r\n        sorted[k] = listt[i];\r\n        k += 1;\r\n        i += 1;\r\n      } else {\r\n        sorted[k] = listt[j];\r\n        k += 1;\r\n        j += 1;\r\n      }\r\n    }\r\n    if (i > mid) {\r\n      for (let l = j; l <= right; l += 1) {\r\n        sorted[k] = listt[l];\r\n        k += 1;\r\n      }\r\n    } else {\r\n      for (let l = i; l <= mid; l += 1) {\r\n        sorted[k] = listt[l];\r\n        k += 1;\r\n      }\r\n    }\r\n    for (let m = left; m <= right; m += 1) {\r\n      let temp2 = -1;\r\n      for (let n = left; n <= right; n += 1) {\r\n        if (temp[n] === sorted[m]) {\r\n          temp2 = n;\r\n        }\r\n      }\r\n      process.push({\r\n        arr: temp.slice(), targets: [m, temp2], phase: 'merge-down',\r\n      });\r\n    }\r\n    keyList = sorted.slice();\r\n\r\n    process.push({\r\n      arr: keyList.slice(), targets: [left, right], phase: 'merge-up',\r\n    });\r\n  };\r\n\r\n  const divide = (left: number, right: number): void => {\r\n    if (left < right) {\r\n      const mid = Math.floor((left + right) / 2);\r\n      divide(left, mid);\r\n      divide(mid + 1, right);\r\n      merge(keyList, left, mid, right);\r\n    }\r\n  };\r\n  divide(0, arrayLength - 1);\r\n  process.push({\r\n    arr: keyList.slice(), targets: [arrayLength, arrayLength], phase: 'done',\r\n  });\r\n  return process;\r\n}\r\n\r\nexport function heapSort(nodes: GraphBar[]): Process[] {\r\n  // 부모노드와 비교 해서 자신이 크면 바꿈\r\n  // 자신의 자식노드 중 큰 노드가 자신보다 크면 변경\r\n  // 변경후 다시 자식노드들과 비교해서 큰 노드가 있다면 다시 변경\r\n  // 최상단까지 진행\r\n  let keyList: number[] = [];\r\n  const arrayLength = nodes.length;\r\n  const process: Process[] = [];\r\n\r\n  function heapify(idx: number): number[] {\r\n    let parent = Math.floor((idx - 1) / 2);\r\n    let tIdx = idx;\r\n    const tKey = keyList.slice();\r\n    while (tIdx > 0 && parent > -1) {\r\n      process.push({\r\n        arr: tKey.slice(), targets: [tIdx, parent], phase: 'compare',\r\n      });\r\n      if (nodes[tKey[parent]].value < nodes[tKey[tIdx]].value) {\r\n        process.push({\r\n          arr: tKey.slice(), targets: [parent, tIdx], phase: 'change',\r\n        });\r\n        [tKey[parent], tKey[tIdx]] = [tKey[tIdx], tKey[parent]];\r\n        tIdx = parent;\r\n        parent = Math.floor((tIdx - 1) / 2);\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return tKey;\r\n  }\r\n  function heapify2(): number[] {\r\n    const tKey = keyList.slice();\r\n    let idx = 0;\r\n    let left = idx * 2 + 1;\r\n    let right = idx * 2 + 2;\r\n\r\n    while (left < tKey.length) {\r\n      if (right < tKey.length) { // 자식이 둘다 존재\r\n        const max = nodes[tKey[left]].value > nodes[tKey[right]].value ? left : right;\r\n        process.push({\r\n          arr: tKey.slice(), targets: [idx, max], phase: 'compare',\r\n        });\r\n        if (nodes[tKey[idx]].value >= nodes[tKey[max]].value) {\r\n          break;\r\n        }\r\n        process.push({\r\n          arr: tKey.slice(), targets: [idx, max], phase: 'change',\r\n        });\r\n        [tKey[idx], tKey[max]] = [tKey[max], tKey[idx]];\r\n        idx = max;\r\n        left = idx * 2 + 1;\r\n        right = idx * 2 + 2;\r\n      } else { // 자식이 좌측만 존재\r\n        process.push({\r\n          arr: tKey.slice(), targets: [idx, left], phase: 'compare',\r\n        });\r\n        if (nodes[tKey[idx]].value < nodes[tKey[left]].value) {\r\n          process.push({\r\n            arr: tKey.slice(), targets: [idx, left], phase: 'compare',\r\n          });\r\n          [tKey[idx], tKey[left]] = [tKey[left], tKey[idx]];\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    return tKey;\r\n  }\r\n\r\n  process.push({\r\n    arr: keyList.slice(), targets: [0, 0], phase: 'insert',\r\n  });\r\n\r\n  for (let i = 0; i < arrayLength; i += 1) {\r\n    keyList.push(nodes[i].key);\r\n    process.push({\r\n      arr: keyList.slice(), targets: [i, i], phase: 'insert',\r\n    });\r\n    keyList = heapify(i).slice();\r\n  }\r\n\r\n  while (keyList.length > 0) {\r\n    process.push({\r\n      arr: keyList.slice(), targets: [0, keyList.length - 1], phase: 'change',\r\n    });\r\n    [keyList[0], keyList[keyList.length - 1]] = [keyList[keyList.length - 1], keyList[0]];\r\n    process.push({\r\n      arr: keyList.slice(), targets: [keyList.length - 1, keyList.length - 1], phase: 'remove',\r\n    });\r\n    keyList.pop();\r\n    keyList = heapify2().slice();\r\n  }\r\n\r\n  return process;\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { GraphBar, Process } from '../../util';\r\nimport {\r\n  bubbleSort, selectionSort, insertionSort, quickSort, mergeSort, heapSort,\r\n} from './SortAlgorithm';\r\n\r\nexport function makeRandomList(howSorted = 'random'): GraphBar[] {\r\n  let list: GraphBar[] = [];\r\n  const size = 10;\r\n  const max = 20;\r\n  function random(): GraphBar[] {\r\n    const tempList: GraphBar[] = [];\r\n    for (let j = 0; j < size; j += 1) {\r\n      const tempBar = {\r\n        key: j, value: Math.floor(Math.random() * (max + 1)), color: '#f54141', index: j, sorted: false, height: 0,\r\n      };\r\n      tempList.push(tempBar);\r\n    }\r\n    return tempList;\r\n  }\r\n  function increasing(): GraphBar[] {\r\n    let k = 0;\r\n    const tempList: GraphBar[] = [];\r\n    for (let j = 0; j < size; j += 1) {\r\n      if (j <= Math.floor(size / 4)) {\r\n        k = Math.floor(Math.random() * (Math.floor(max / 4 + 1) - k)) + k;\r\n      } else if (j <= Math.floor(size / 2)) {\r\n        k = Math.floor(Math.random() * (Math.floor(max / 2 + 1) - k)) + k;\r\n      } else if (j <= Math.floor(size * 0.75)) {\r\n        k = Math.floor(Math.random() * (Math.floor(max * 0.75 + 1) - k)) + k;\r\n      } else {\r\n        k = Math.floor(Math.random() * (max + 1 - k)) + k;\r\n      }\r\n      const tempBar = {\r\n        key: j, value: k, color: '#f54141', index: j, sorted: false, height: 0,\r\n      };\r\n      tempList.push(tempBar);\r\n    }\r\n    return tempList;\r\n  }\r\n  function nearlyIncreasing(): GraphBar[] {\r\n    let k = 0;\r\n    const tempList: GraphBar[] = [];\r\n    for (let j = 0; j < size; j += 1) {\r\n      if (j <= Math.floor(size / 4)) {\r\n        k = Math.floor(Math.random() * (Math.floor(max / 5) - k)) + k;\r\n      } else if (j <= Math.floor(size / 2)) {\r\n        k = Math.floor(Math.random() * (Math.floor(max * 0.4) - k)) + k;\r\n      } else if (j <= Math.floor(size * 0.75)) {\r\n        k = Math.floor(Math.random() * (Math.floor(max * 0.6) - k)) + k;\r\n      } else {\r\n        k = Math.floor(Math.random() * (Math.floor(max * 0.8) - k)) + k;\r\n      }\r\n      const tempBar = {\r\n        key: j, value: k + Math.floor(Math.random() * 4), color: '#f54141', index: j, sorted: false, height: 0,\r\n      };\r\n      tempList.push(tempBar);\r\n    }\r\n    return tempList;\r\n  }\r\n  function decreasing(): GraphBar[] {\r\n    const tempList: GraphBar[] = [];\r\n    let k = max;\r\n    for (let j = 0; j < size; j += 1) {\r\n      if (j <= Math.floor(size / 4)) {\r\n        k = Math.floor(Math.random() * (k - Math.floor(max * 0.75 + 1)))\r\n        + Math.floor(max * 0.75 + 1);\r\n      } else if (j <= Math.floor(size / 2)) {\r\n        k = Math.floor(Math.random() * (k - Math.floor(max * 0.5 + 1))) + Math.floor(max * 0.5 + 1);\r\n      } else if (j <= Math.floor(size * 0.75)) {\r\n        k = Math.floor(Math.random() * (k - Math.floor(max * 0.25 + 1)))\r\n        + Math.floor(max * 0.25 + 1);\r\n      } else {\r\n        k = Math.floor(Math.random() * (k)) + 0;\r\n      }\r\n      const tempBar = {\r\n        key: j, value: k, color: '#f54141', index: j, sorted: false, height: 0,\r\n      };\r\n      tempList.push(tempBar);\r\n    }\r\n    return tempList;\r\n  }\r\n  function nearlyDecreasing(): GraphBar[] {\r\n    const tempList: GraphBar[] = [];\r\n    let k = Math.floor(max * 0.9);\r\n    for (let j = 0; j < size; j += 1) {\r\n      if (j <= Math.floor(size / 4)) {\r\n        k = Math.floor(Math.random() * (k - Math.floor(max * 0.75))) + Math.floor(max * 0.75);\r\n      } else if (j <= Math.floor(size / 2)) {\r\n        k = Math.floor(Math.random() * (k - Math.floor(max * 0.5))) + Math.floor(max * 0.5);\r\n      } else if (j <= Math.floor(size * 0.75)) {\r\n        k = Math.floor(Math.random() * (k - Math.floor(max * 0.25))) + Math.floor(max * 0.25);\r\n      } else {\r\n        k = Math.floor(Math.random() * (k)) + 0;\r\n      }\r\n      const tempBar = {\r\n        key: j, value: k + Math.floor(Math.random() * 4), color: '#f54141', index: j, sorted: false, height: 0,\r\n      };\r\n      tempList.push(tempBar);\r\n    }\r\n    return tempList;\r\n  }\r\n  switch (howSorted) {\r\n    case 'random':\r\n      list = random();\r\n      break;\r\n    case 'increasing':\r\n      list = increasing();\r\n      break;\r\n    case 'decreasing':\r\n      list = decreasing();\r\n      break;\r\n    case 'nearlyIncreasing':\r\n      list = nearlyIncreasing();\r\n      break;\r\n    case 'nearlyDecreasing':\r\n      list = nearlyDecreasing();\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return list;\r\n}\r\n\r\nexport function rendering(list: GraphBar[], process: Process): GraphBar[] {\r\n  // 소팅이 끝났으면 모든 그래프를 초록색으로 변환.\r\n  if (process.phase === 'done') {\r\n    for (let i = 0; i < list.length; i += 1) {\r\n      list[process.arr[i]].color = '#2ee22e';\r\n    }\r\n  } else {\r\n    for (let i = 0; i < list.length; i += 1) {\r\n      if (process.phase !== 'merge-down') {\r\n        // 그래프의 위치 인덱스 변경.\r\n        list[process.arr[i]].index = i;\r\n        // 먼저 막대 빨간색으로 초기화\r\n        list[process.arr[i]].color = '#f54141';\r\n      }\r\n      // 소팅 알고리즘 진행 상황에따라 그래프의 색과 높이 변경.\r\n      if (process.phase === 'change') {\r\n        if (list[process.arr[i]].index\r\n          === process.targets[0]\r\n          || list[process.arr[i]].index\r\n          === process.targets[1]) {\r\n          list[process.arr[i]].color = '#2ee22e';\r\n          if (process.targets[1] === 1) {\r\n            list[process.arr[i]].height = 0;\r\n          }\r\n        }\r\n      } else if (process.phase === 'compare') {\r\n        for (let j = 0; j < process.targets.length; j += 1) {\r\n          if (list[process.arr[i]].index === process.targets[j]) {\r\n            list[process.arr[i]].height = 0;\r\n            list[process.arr[i]].color = '#ff9400';\r\n          }\r\n        }\r\n      } else if (process.phase === 'merge-compare') {\r\n        if (list[process.arr[i]].index\r\n          === process.targets[1]) {\r\n          list[process.arr[i]].color = '#ff9400';\r\n        } else if (list[process.arr[i]].index\r\n          === process.targets[0]) {\r\n          list[process.arr[i]].color = '#ff9400';\r\n        }\r\n      } else if (process.phase === 'insrt-compare') {\r\n        if (list[process.arr[i]].index\r\n          === process.targets[1]) {\r\n          list[process.arr[i]].height = 50;\r\n          list[process.arr[i]].color = '#ff9400';\r\n        } else if (list[process.arr[i]].index\r\n          === process.targets[0]) {\r\n          list[process.arr[i]].color = '#ff9400';\r\n        }\r\n      } else if (process.phase === 'insert') {\r\n        if (list[process.arr[i]].index\r\n          === process.targets[1]) {\r\n          list[process.arr[i]].height = 0;\r\n        }\r\n      } else if (process.phase === 'merge-up') {\r\n        for (let j = process.targets[0]; j <= process.targets[1]; j += 1) {\r\n          if (list[process.arr[i]].index === j) {\r\n            list[process.arr[i]].height = 0;\r\n            list[process.arr[i]].color = '#2ee22e';\r\n          }\r\n        }\r\n      } else if (process.phase === 'merge-down') {\r\n        if (list[process.arr[i]].index === process.targets[1]\r\n          && list[process.arr[i]].height === 0) {\r\n          const changeTo = process.targets[0];\r\n          list[process.arr[i]].index = changeTo;\r\n          list[process.arr[i]].height = 50;\r\n          list[process.arr[i]].color = '#ff9400';\r\n        }\r\n      } else if (process.phase === 'start') {\r\n        for (let j = 0; j < list.length; j += 1) {\r\n          list[process.arr[j]].height = 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return list.slice();\r\n}\r\nexport const sort = (list: GraphBar[], sortName: string): Process[] => {\r\n  const keyList = list.map((el) => el.key);\r\n  let process: Process[] = [];\r\n  switch (sortName) {\r\n    case 'ISort':\r\n      process = insertionSort(list, keyList);\r\n      break;\r\n    case 'SSort':\r\n      process = selectionSort(list, keyList);\r\n      break;\r\n    case 'BSort':\r\n      process = bubbleSort(list, keyList);\r\n      break;\r\n    case 'QSort':\r\n      process = quickSort(list, keyList, 0, list.length - 1, process);\r\n      break;\r\n    case 'MSort':\r\n      process = mergeSort(list, keyList);\r\n      break;\r\n    case 'HSort':\r\n      process = heapSort(list);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  process.push({\r\n    arr: keyList.slice(), targets: [], phase: 'done',\r\n  });\r\n  return process;\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\r\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\r\nimport SortBars from './SortBars';\r\nimport { GraphBar, Process } from '../../util';\r\nimport { makeRandomList, sort, rendering } from './UtilFunction';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n// speed와 playing을 전역변수로 만든 이유는 함수안에서 선언하면 클로져 때문에 값을 도중에 바꿀 수가 없기 때문.\r\nlet playing = false;\r\nlet speed = 1000;\r\n\r\n// 소팅 알고리즘의 현재 진행 정도를 저장해 놓는 변수.\r\nlet wholeSortProcess: Process[];\r\n// 소팅 알고리즘 상태를 기억하는 배열의 길이 변수화.\r\nlet processLength: number;\r\nlet initialization = false;\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction SortView(info: any): JSX.Element {\r\n  console.log(initialization);\r\n  const pathName = info.location.pathname.substr(1);\r\n  const classes = useStyles();\r\n  const [toggle, setToggle] = useState(false);\r\n  // 리스트 초기 변수\r\n  const [graphBars, setBar] = useState<GraphBar[]>(makeRandomList());\r\n\r\n  if (graphBars !== undefined) {\r\n    if (initialization) {\r\n      wholeSortProcess = sort(graphBars, pathName);\r\n      processLength = wholeSortProcess.length;\r\n    }\r\n  }\r\n\r\n  const [nowDepth, setNowDepth] = useState<number>(0);\r\n  const [nowPlaying, setNowPlaying] = useState<boolean>(playing);\r\n  // 소팅 알고리즘의 모든 상태를 순서대로 기억하는 배열 [앞으로, 뒤로, 멈춤, 재생]을 가능하게 해주는 놈.\r\n  function setDepth(depth: number): void {\r\n    if (depth <= processLength - 1) {\r\n      setNowDepth(depth);\r\n    }\r\n  }\r\n  // 소팅 알고리즘의 특정 부분으로 이동해주는 함수.\r\n  function goTo(depth: number): void {\r\n    initialization = false;\r\n    // stop이 눌러졌는지 확인.\r\n    if (playing) {\r\n      // 상태기억 배열의 길이를 벗어하는 depth가 들어왔는지 확인.\r\n      if (depth < processLength && depth > -1) {\r\n        // 현재 depth 저장.\r\n        setDepth(depth);\r\n        setBar(rendering(graphBars, wholeSortProcess[depth]));\r\n      }\r\n    }\r\n  }\r\n\r\n  // 랜덤 번호 생성 함수. 처음 렌더링 할때 과정을 함수에 저장함.\r\n  function makeRandomNumber(howSorted = 'random'): void {\r\n    const temp: GraphBar[] = makeRandomList(howSorted);\r\n    setBar(temp);\r\n    setDepth(0);\r\n    initialization = true;\r\n  }\r\n\r\n  // 멈추는 함수.\r\n  function stop(): void {\r\n    playing = false;\r\n    setNowPlaying(playing);\r\n    initialization = false;\r\n  }\r\n\r\n  // 멈춤 flag를 해제하는 함수.(진행하는 함수 아니고 멈춤을 해제하는거임)\r\n  function play(): void {\r\n    if (processLength === undefined) {\r\n      wholeSortProcess = sort(graphBars, pathName);\r\n      processLength = wholeSortProcess.length;\r\n    }\r\n    playing = true;\r\n    setNowPlaying(playing);\r\n  }\r\n  // 재귀를 이용해 goTo()함수를 연속적으로 호출하는 함수.\r\n  const flow = (depth: number): void => {\r\n    // stop 버튼이 눌러지면 정지.\r\n    if (playing) {\r\n      goTo(depth);\r\n      // 끝났는지 체크.\r\n      if (depth < processLength - 1) {\r\n        // setTimeout()을 전역변수 speed 만큼 걸고 재귀적으로 flow함수를 호출.\r\n        setTimeout(() => {\r\n          flow(depth + 1);\r\n        }, speed);\r\n      } else {\r\n        // 끝났으면 멈춤 플래그 설정.\r\n        stop();\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => () => {\r\n    function init(): void {\r\n      playing = false;\r\n      setNowPlaying(playing);\r\n      initialization = false;\r\n    }\r\n    init();\r\n  }, []);\r\n\r\n  // 다른 화면으로 넘어갈 때는 초기화\r\n  if (!playing) {\r\n    initialization = true;\r\n  }\r\n\r\n  return (\r\n    <div style={{\r\n      height: window.innerHeight,\r\n    }}\r\n    >\r\n      <div style={{\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'center',\r\n      }}\r\n      >\r\n        {/* 이동에 관한 함수는 stop상태에서만 조작할 수 있음 == (if (!playing)) */}\r\n        <Button className={classes.button} size=\"medium\" onClick={(): void => { if (!playing) { play(); goTo(0); stop(); initialization = true; } }}>시작으로 가기</Button>\r\n        <IconButton aria-label=\"skipPrevious\" onClick={(): void => { if (!playing) { play(); goTo(nowDepth - 1); stop(); } }}>\r\n          <SkipPreviousIcon />\r\n        </IconButton>\r\n        <IconButton aria-label=\"playAndPause\" onClick={(): void => { if (!playing) { play(); flow(nowDepth); initialization = true; } else { stop(); initialization = true; } }}>\r\n          {(!nowPlaying || initialization)\r\n            && <PlayArrowIcon />}\r\n          {(nowPlaying && !initialization)\r\n            && <PauseIcon />}\r\n        </IconButton>\r\n        <IconButton aria-label=\"skipNext\" onClick={(): void => { if (!playing) { play(); goTo(nowDepth + 1); stop(); } }}>\r\n          <SkipNextIcon />\r\n        </IconButton>\r\n        {!toggle && <Button className={classes.button} size=\"medium\" onClick={(): void => { if (!toggle) { setToggle(true); } else { setToggle(false); } }}>배열생성</Button>}\r\n        {toggle\r\n          && (\r\n            <div>\r\n              <Button className={classes.button} color=\"primary\" size=\"medium\" onClick={(): void => { makeRandomNumber(); stop(); }}>난수배열</Button>\r\n              <Button className={classes.button} color=\"primary\" size=\"medium\" onClick={(): void => { makeRandomNumber('increasing'); stop(); }}>증가배열</Button>\r\n              <Button className={classes.button} color=\"primary\" size=\"medium\" onClick={(): void => { makeRandomNumber('decreasing'); stop(); }}>감소배열</Button>\r\n              <Button className={classes.button} color=\"primary\" size=\"medium\" onClick={(): void => { makeRandomNumber('nearlyIncreasing'); stop(); }}>상승세배열</Button>\r\n              <Button className={classes.button} color=\"primary\" size=\"medium\" onClick={(): void => { makeRandomNumber('nearlyDecreasing'); stop(); }}>하강세배열</Button>\r\n            </div>\r\n          )}\r\n        <Button className={classes.button} size=\"medium\" onClick={(): void => { if (speed < 2000) { speed += 100; } }}>느리게</Button>\r\n        <Button className={classes.button} size=\"medium\" onClick={(): void => { if (speed > 100) { speed -= 100; } }}>빠르게</Button>\r\n      </div>\r\n\r\n      <div style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'flex-end',\r\n      }}\r\n      >\r\n        <SortBars graphBars={graphBars} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SortView;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { GraphBar, Line } from '../../util';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction NodeTree({ graphNodes, sortedNodes, lines }: any): JSX.Element {\r\n  const graphLength = graphNodes.length;\r\n  const maxDepth = Math.floor(Math.log2(graphLength));\r\n  const maxChildCnt = maxDepth ** 2;\r\n  const NodeTrees = graphNodes.map((graphNode: GraphBar) => {\r\n    const currentDepth = (Math.ceil(Math.log2(graphNode.index + 2)) - 1);\r\n    const subDepth = maxDepth - currentDepth;\r\n    const widthInterval = 2 ** subDepth * (window.innerWidth / (maxChildCnt + 10));\r\n    const nodeCntInCurDepth = 2 ** currentDepth;\r\n    const positionInCurDepth = (graphNode.index + 1) - nodeCntInCurDepth;\r\n    const getXPosition = positionInCurDepth * widthInterval\r\n      - (widthInterval / 2) * (nodeCntInCurDepth - 1) - 25 + window.innerWidth / 2;\r\n    const getYPosition = currentDepth * (window.innerHeight / 10) + (window.innerHeight / 10);\r\n\r\n    return (\r\n      <div\r\n        style={{\r\n          position: 'absolute',\r\n          width: '50px',\r\n          height: '50px',\r\n          backgroundColor: graphNode.color,\r\n          textAlign: 'center',\r\n          color: 'black',\r\n          border: '1px solid black',\r\n          borderRadius: '25px',\r\n          transform: `translate(${getXPosition}px, ${getYPosition}px)`,\r\n          WebkitTransition: ' -webkit-transform 0.1s',\r\n          transition: 'transform 0.1s',\r\n          visibility: graphNode.display === 'visible' || graphNode.display === undefined ? 'visible' : 'hidden',\r\n          zIndex: 2,\r\n        }}\r\n        key={graphNode.key.toString()}\r\n      >\r\n        <h1\r\n          style={{\r\n            marginBlockStart: '0',\r\n            marginBlockEnd: '0',\r\n          }}\r\n        >\r\n          {graphNode.value}\r\n        </h1>\r\n      </div>\r\n    );\r\n  });\r\n  const sortedNode = sortedNodes.map((graphNode: GraphBar) => (\r\n    <div\r\n      style={{\r\n        bottom: `${window.innerHeight / 4}PX`,\r\n        position: 'absolute',\r\n        width: '50px',\r\n        height: '50px',\r\n        backgroundColor: graphNode.color,\r\n        textAlign: 'center',\r\n        color: 'black',\r\n        borderRadius: '25px',\r\n        border: '1px solid black',\r\n        transform: `translate(${graphNode.index * 50 - sortedNodes.length * 25 + window.innerWidth / 2}px, 0px)`,\r\n        WebkitTransition: ' -webkit-transform 0.2s',\r\n        transition: 'transform 0.2s',\r\n      }}\r\n      key={graphNode.key.toString()}\r\n    >\r\n      <h1\r\n        style={{\r\n          marginBlockStart: '0',\r\n          marginBlockEnd: '0',\r\n        }}\r\n      >\r\n        {graphNode.value}\r\n      </h1>\r\n    </div>\r\n  ));\r\n  const paintLines = lines.map((line: Line) => {\r\n    const currentDepthTo = (Math.ceil(Math.log2(line.to + 2)) - 1);\r\n    const currentDepthFrom = (Math.ceil(Math.log2(line.from + 2)) - 1);\r\n    const subDepthTo = maxDepth - currentDepthTo;\r\n    const subDepthFrom = maxDepth - currentDepthFrom;\r\n    const widthIntervalTo = 2 ** subDepthTo * (window.innerWidth / (maxChildCnt + 10));\r\n    const widthIntervalFrom = 2 ** subDepthFrom * (window.innerWidth / (maxChildCnt + 10));\r\n    const nodeCntInCurDepthTo = 2 ** currentDepthTo;\r\n    const nodeCntInCurDepthFrom = 2 ** currentDepthFrom;\r\n    const positionInCurDepthTo = (line.to + 1) - nodeCntInCurDepthTo;\r\n    const positionInCurDepthFrom = (line.from + 1) - nodeCntInCurDepthFrom;\r\n    const getXPositionTo = positionInCurDepthTo * widthIntervalTo\r\n      - (widthIntervalTo / 2) * (nodeCntInCurDepthTo - 1) + window.innerWidth / 2;\r\n    const getYPositionTo = currentDepthTo * (window.innerHeight / 10)\r\n      + (window.innerHeight / 10) + 25;\r\n    const getXPositionFrom = positionInCurDepthFrom * widthIntervalFrom\r\n      - (widthIntervalFrom / 2) * (nodeCntInCurDepthFrom - 1) + window.innerWidth / 2;\r\n    const getYPositionFrom = currentDepthFrom * (window.innerHeight / 10)\r\n      + (window.innerHeight / 10) + 25;\r\n    return (\r\n      <line\r\n        x1={`${getXPositionTo}px`}\r\n        y1={`${getYPositionTo}px`}\r\n        x2={`${getXPositionFrom}px`}\r\n        y2={`${getYPositionFrom}px`}\r\n        style={{\r\n          stroke: line.color,\r\n          strokeWidth: 2,\r\n          zIndex: 1,\r\n          visibility: line.display === 'visible' ? 'visible' : 'hidden',\r\n        }}\r\n        key={line.key.toString()}\r\n      />\r\n    );\r\n  });\r\n  return (\r\n    <div>\r\n      {NodeTrees}\r\n      {sortedNode}\r\n      <svg\r\n        height=\"700px\"\r\n        width={window.innerWidth}\r\n      >\r\n        {paintLines}\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nNodeTree.propTypes = {\r\n  graphNodes: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  sortedNodes: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  lines: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n};\r\nexport default NodeTree;\r\n","/* eslint-disable no-param-reassign */\r\nimport React, { useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\r\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\r\n\r\nimport { Process, GraphBar, Line } from '../../util';\r\nimport NodeTree from './NodeTree';\r\nimport { sort } from './UtilFunction';\r\n\r\nlet playing = false;\r\nlet speed = 1000;\r\n\r\nfunction HSort(): JSX.Element {\r\n  function makeRandomList(): [GraphBar[], Line[]] {\r\n    const list: GraphBar[] = [];\r\n    const line: Line[] = [];\r\n    for (let j = 0; j < 15; j += 1) {\r\n      const tempNode = {\r\n        key: j, value: Math.floor(Math.random() * 21), color: '#f54141', index: j, sorted: false, display: 'hidden',\r\n      };\r\n      if (j > 0) {\r\n        const tempLine = {\r\n          key: j - 1, from: j, to: Math.floor((j - 1) / 2), color: 'black', display: 'hidden',\r\n        };\r\n        line.push(tempLine);\r\n      }\r\n      list.push(tempNode);\r\n    }\r\n    return [list, line];\r\n  }\r\n  // 리스트 초기 변수\r\n  const listAndLine = makeRandomList();\r\n  const [graphNodes, setNode] = useState<GraphBar[]>(listAndLine[0]);\r\n  const [graphLines, setLines] = useState<Line[]>(listAndLine[1]);\r\n\r\n  // heapSort();\r\n\r\n  function rendering(\r\n    list: GraphBar[],\r\n    lines: Line[],\r\n    process: Process[],\r\n    depth: number,\r\n  ): [GraphBar[], Line[]] {\r\n    for (let i = 0; i < list.length; i += 1) {\r\n      list[i].display = 'hidden';\r\n      list[i].color = '#f54141';\r\n      if (i !== 0) {\r\n        lines[i - 1].display = 'hidden';\r\n      }\r\n      if (depth === 0) {\r\n        list[i].index = i;\r\n      }\r\n      if (process[depth].phase === 'done') {\r\n        list[i].color = '#2ee22e';\r\n      }\r\n    }\r\n    if (process[depth].phase === 'done') {\r\n      return [list.slice(), lines.slice()];\r\n    }\r\n    for (let i = 0; i < process[depth].arr.length; i += 1) {\r\n      list[process[depth].arr[i]].display = 'visible';\r\n      // 먼저 막대 빨간색으로 초기화\r\n      list[process[depth].arr[i]].color = '#f54141';\r\n      // 그래프의 위치 인덱스 변경.\r\n      list[process[depth].arr[i]].index = i;\r\n      if (i > 0) {\r\n        lines[i - 1].display = 'visible';\r\n      }\r\n      // 소팅 알고리즘 진행 상황에따라 그래프의 색과 높이 변경.\r\n      if (process[depth].phase === 'change') {\r\n        if (list[process[depth].arr[i]].index\r\n                    === process[depth].targets[0]\r\n                    || list[process[depth].arr[i]].index\r\n                    === process[depth].targets[1]) {\r\n          list[process[depth].arr[i]].color = '#2ee22e';\r\n        }\r\n      } else if (process[depth].phase === 'compare') {\r\n        if (list[process[depth].arr[i]].index\r\n                    === process[depth].targets[1]) {\r\n          list[process[depth].arr[i]].color = '#ff9400';\r\n        } else if (list[process[depth].arr[i]].index\r\n                    === process[depth].targets[0]) {\r\n          list[process[depth].arr[i]].color = '#ff9400';\r\n        }\r\n      } else if (process[depth].phase === 'insert') {\r\n        if (list[process[depth].arr[i]].index\r\n          === process[depth].targets[0]) {\r\n          list[process[depth].arr[i]].display = 'visible';\r\n          if (process[depth].arr[i] > 0) {\r\n            lines[process[depth].arr[i] - 1].display = 'visible';\r\n          }\r\n        }\r\n      } else if (process[depth].phase === 'remove') {\r\n        if (list[process[depth].arr[i]].index\r\n          === process[depth].targets[0]) {\r\n          list[process[depth].arr[i]].display = 'hidden';\r\n          if (process[depth].arr.length > 1) {\r\n            lines[process[depth].arr.length - 2].display = 'hidden';\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return [list.slice(), lines.slice()];\r\n  }\r\n\r\n  // 소팅 알고리즘의 현재 진행 정도를 저장해 놓는 변수.\r\n  const [nowDepth, setNowDepth] = useState<number>(0);\r\n  const [nowPlaying, setNowPlaying] = useState<boolean>(playing);\r\n  // 소팅 알고리즘의 모든 상태를 순서대로 기억하는 배열 [앞으로, 뒤로, 멈춤, 재생]을 가능하게 해주는 놈.\r\n  let wholeSortProcess: Process[] = sort(graphNodes, 'HSort');\r\n  // 소팅 알고리즘 상태를 기억하는 배열의 길이 변수화.\r\n  let processLength = wholeSortProcess.length;\r\n  // 소팅 알고리즘의 현재 진행 정도를 저장하는 함수.\r\n  function setDepth(depth: number): void {\r\n    if (depth <= processLength - 1) {\r\n      setNowDepth(depth);\r\n    }\r\n  }\r\n  // 소팅 알고리즘의 특정 부분으로 이동해주는 함수.\r\n  function goTo(depth: number): void {\r\n    // stop이 눌러졌는지 확인.\r\n    if (playing) {\r\n      // 상태기억 배열의 길이를 벗어하는 depth가 들어왔는지 확인.\r\n      if (depth < processLength && depth > -1) {\r\n        // 현재 depth 저장.\r\n        setDepth(depth);\r\n        const renderResult = rendering(graphNodes, graphLines, wholeSortProcess, depth);\r\n        setNode(renderResult[0]);\r\n        setLines(renderResult[1]);\r\n      }\r\n    }\r\n  }\r\n\r\n  // 랜덤 번호 생성 함수. 처음 렌더링 할때 과정을 함수에 저장함.\r\n  function makeRandomNumber(): void {\r\n    const temp: [GraphBar[], Line[]] = makeRandomList();\r\n    setNode(temp[0]);\r\n    setLines(temp[1]);\r\n    setDepth(0);\r\n    wholeSortProcess = sort(temp[0], 'HSort');\r\n    processLength = wholeSortProcess.length;\r\n  }\r\n\r\n  // 멈추는 함수.\r\n  function stop(): void {\r\n    playing = false;\r\n    setNowPlaying(playing);\r\n  }\r\n\r\n  // 멈춤 flag를 해제하는 함수.(진행하는 함수 아니고 멈춤을 해제하는거임)\r\n  function play(): void {\r\n    playing = true;\r\n    setNowPlaying(playing);\r\n  }\r\n  // 재귀를 이용해 goTo()함수를 연속적으로 호출하는 함수.\r\n  const flow = (depth: number): void => {\r\n    // stop 버튼이 눌러지면 정지.\r\n    if (playing) {\r\n      goTo(depth);\r\n      // 끝났는지 체크.\r\n      if (depth < processLength - 1) {\r\n        // setTimeout()을 전역변수 speed 만큼 걸고 재귀적으로 flow함수를 호출.\r\n        setTimeout(() => {\r\n          flow(depth + 1);\r\n        }, speed);\r\n      } else {\r\n        // 끝났으면 멈춤 플래그 설정.\r\n        stop();\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div style={{\r\n      height: '700px',\r\n    }}\r\n    >\r\n      <div style={{\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'center',\r\n      }}\r\n      >\r\n        {/* 이동에 관한 함수는 stop상태에서만 조작할 수 있음 == (if (!playing)) */}\r\n        <Button className=\"hSortButton\" size=\"medium\" onClick={(): void => { if (!playing) { play(); goTo(0); stop(); } }}>시작으로 가기</Button>\r\n        <IconButton aria-label=\"skipPrevious\" onClick={(): void => { if (!playing) { play(); goTo(nowDepth - 1); stop(); } }}>\r\n          <SkipPreviousIcon />\r\n        </IconButton>\r\n        <IconButton aria-label=\"playAndPause\" onClick={(): void => { if (!playing) { play(); flow(nowDepth); } else { stop(); } }}>\r\n          {!nowPlaying\r\n           && <PlayArrowIcon />}\r\n          {nowPlaying\r\n           && <PauseIcon />}\r\n        </IconButton>\r\n        <IconButton aria-label=\"skipNext\" onClick={(): void => { if (!playing) { play(); goTo(nowDepth + 1); stop(); } }}>\r\n          <SkipNextIcon />\r\n        </IconButton>\r\n        <Button className=\"hSortButton\" size=\"medium\" onClick={(): void => { makeRandomNumber(); stop(); }}>초기화 하기</Button>\r\n        <Button className=\"hSortButton\" size=\"medium\" onClick={(): void => { if (speed < 2000) { speed += 100; } }}>느리게</Button>\r\n        <Button className=\"hSortButton\" size=\"medium\" onClick={(): void => { if (speed > 100) { speed -= 100; } }}>빠르게</Button>\r\n      </div>\r\n      <div style={{\r\n        display: 'flex',\r\n        justifyContent: 'flex-start',\r\n      }}\r\n      >\r\n        <NodeTree graphNodes={graphNodes} sortedNodes={graphNodes} lines={graphLines} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HSort;\r\n","import React from 'react';\r\nimport { Node, Line } from '../../util';\r\n\r\nfunction positionX(key: number): number {\r\n  return (400 + 100 * Math.floor(key / 2));\r\n}\r\nfunction positionY(key: number): number {\r\n  return (200 + ((-1) ** Math.ceil(key / 2)) * 50 + ((-1) ** Math.ceil(key / 2))\r\n  * (Math.sqrt(40000 - ((100 * Math.floor(key / 2) - 200) ** 2)) / 1.5));\r\n}\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction GraphNodes({ graphNodes, graphLines, list }: any): JSX.Element {\r\n  const nodes = graphNodes.map((node: Node) => (\r\n    <div\r\n      style={{\r\n        position: 'absolute',\r\n        borderRadius: '50px',\r\n        border: '2px solid black',\r\n        height: '50px',\r\n        width: '50px',\r\n        backgroundColor: node.color,\r\n        transform: `translate(${positionX(node.key)}px, ${positionY(node.key)}px)`,\r\n        zIndex: 100,\r\n      }}\r\n      key={node.key}\r\n    >\r\n      <p\r\n        style={{\r\n          color: 'black',\r\n          textAlign: 'center',\r\n        }}\r\n      >\r\n        {node.key}\r\n      </p>\r\n    </div>\r\n  ));\r\n  const lines = graphLines.map((line: Line) => (\r\n    <line\r\n      x1={`${positionX(line.from) + 25}`}\r\n      y1={`${positionY(line.from) + 25}`}\r\n      x2={`${positionX(line.to) + 25}`}\r\n      y2={`${positionY(line.to) + 25}`}\r\n      style={{\r\n        stroke: line.color,\r\n        strokeWidth: 2,\r\n        zIndex: 1,\r\n      }}\r\n      key={line.key}\r\n    />\r\n  ));\r\n  const stackOrQueue = list.map((node: number) => (\r\n    <div\r\n      style={{\r\n        width: '50px',\r\n        height: '50px',\r\n        borderRadius: '10px',\r\n        fontSize: '40px',\r\n        color: 'black',\r\n        border: '2px solid black',\r\n        borderStyle: 'dashed',\r\n        textAlign: 'center',\r\n        lineHeight: '40px',\r\n        marginBottom: '5px',\r\n        WebkitTransition: ' -webkit-transform 0.2s opacity 0.2s',\r\n        transition: 'transform 0.2s opacity 0.2s',\r\n      }}\r\n      key={node}\r\n    >\r\n      {node}\r\n    </div>\r\n  ));\r\n  return (\r\n    <div>\r\n      {nodes}\r\n      <div style={{\r\n        display: 'flex',\r\n        height: '400px',\r\n        width: '70px',\r\n        borderLeft: '2px solid black',\r\n        borderRight: '2px solid black',\r\n        borderBottom: '2px solid black',\r\n        position: 'absolute',\r\n        transform: 'translate(1000px, 30px)',\r\n        flexDirection: 'column-reverse',\r\n        justifyContent: 'flex-start',\r\n        alignItems: 'center',\r\n      }}\r\n      >\r\n        {stackOrQueue}\r\n      </div>\r\n      <svg height=\"900\" width=\"1600\">\r\n        {lines}\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\nexport default GraphNodes;\r\n","import {\r\n  Node, Line, GProcess, FixedNode, WeightedLine,\r\n} from '../../util';\r\nimport {\r\n  bfs, dfs, prim, kruskal, dijkstra,\r\n} from './GraphAlgorithm';\r\n\r\nexport function makeGraph(density = 'normal'): [Node[], Map<string, Line>] {\r\n  const len = 10;\r\n  let lineKey = 0;\r\n  const nodeList: Node[] = [];\r\n  for (let i = 0; i < len; i += 1) {\r\n    const node: Node = {\r\n      key: i, connected: [], color: 'grey',\r\n    };\r\n    nodeList.push(node);\r\n  }\r\n  const lineMap = new Map<string, Line>();\r\n  let d = len / 3;\r\n  if (density === 'low') {\r\n    d = len / 5;\r\n  } else if (density === 'high') {\r\n    d = len / 2;\r\n  }\r\n  for (let i = 0; i < len - 1; i += 1) {\r\n    if (nodeList[i].connected.length >= d) break;\r\n    const randomSet = new Set<number>();\r\n    for (let j = 0; j < d - nodeList[i].connected.length; j += 1) {\r\n      randomSet.add(Math.floor(Math.random() * (len - i - 1) + i + 1));\r\n    }\r\n    const tempList = Array.from(randomSet).sort();\r\n    for (let j = 0; j < tempList.length; j += 1) {\r\n      nodeList[i].connected.push(tempList[j]);\r\n      nodeList[tempList[j]].connected.push(i);\r\n    }\r\n    for (let j = 0; j < tempList.length; j += 1) {\r\n      const line: Line = {\r\n        key: lineKey, from: i, to: tempList[j], color: 'black',\r\n      };\r\n      lineMap.set(i.toString().concat('to').concat(tempList[j].toString()), line);\r\n      lineKey += 1;\r\n    }\r\n  }\r\n  return [nodeList, lineMap];\r\n}\r\n\r\nexport function makeFixedGraph(type: number): [FixedNode[], Map<string, WeightedLine>] {\r\n  const nodeList: FixedNode[] = [];\r\n  const lineMap = new Map<string, WeightedLine>();\r\n  const howlong: number[] = [6];\r\n  const location: number[][][] = [\r\n    [[0, 0], [400, 0], [170, 150], [230, 250], [0, 400], [400, 400]],\r\n  ];\r\n  const connetion: number[][][] = [\r\n    [[1, 2, 4], [0, 3, 5], [0, 4, 3], [1, 2, 4, 5], [0, 2, 3, 5], [1, 3, 4]],\r\n  ];\r\n  for (let i = 0; i < howlong[type]; i += 1) {\r\n    nodeList.push({\r\n      key: i, connected: connetion[type][i], color: 'grey', x: location[type][i][0], y: location[type][i][1],\r\n    });\r\n    const from = i;\r\n    for (let j = 0; j < connetion[type][i].length; j += 1) {\r\n      const to = connetion[type][i][j];\r\n      const key = from < to ? `${from}to${to}` : `${to}to${from}`;\r\n      const line: WeightedLine = {\r\n        key, from, to, color: 'black', weight: Math.floor(Math.random() * 30),\r\n      };\r\n      lineMap.set(key, line);\r\n    }\r\n  }\r\n  return [nodeList, lineMap];\r\n}\r\n\r\nexport const search = (nodeList: Node[], searchName: string): GProcess[] => {\r\n  let process: GProcess[] = [];\r\n  switch (searchName) {\r\n    case 'bfs':\r\n      process = bfs(nodeList);\r\n      break;\r\n    case 'dfs':\r\n      process = dfs(nodeList);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return process;\r\n};\r\n\r\nexport function find(nodeList: FixedNode[], lineMap: Map<string, WeightedLine>,\r\n  from: number, findName: string): GProcess[] {\r\n  let process: GProcess[] = [];\r\n  switch (findName) {\r\n    case 'prim':\r\n      process = prim(nodeList, lineMap, from);\r\n      break;\r\n    case 'kruskal':\r\n      process = kruskal(nodeList, lineMap);\r\n      break;\r\n    case 'dijkstra':\r\n      process = dijkstra(nodeList, lineMap, from);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return process;\r\n}\r\n\r\nexport function rendering(nodeList: Node[], lineMap: Map<string, Line>,\r\n  process: GProcess): [Node[], Map<string, Line>] {\r\n  const NList = nodeList.slice();\r\n  const LMap = lineMap;\r\n  const NVisited = process.visitedNode;\r\n  const LVisited = process.visitedLine;\r\n  const NTargets = process.targetNodes;\r\n  // 단계를 위한 초기화\r\n  for (let i = 0; i < NList.length; i += 1) {\r\n    NList[i].color = 'grey';\r\n  }\r\n  LMap.forEach((value, key) => {\r\n    const line = LMap.get(key);\r\n    if (line !== undefined) {\r\n      line.color = 'black';\r\n      LMap.set(key, line);\r\n    }\r\n  });\r\n  // 이미 방문된 것들 색 바꿔주기\r\n  for (let i = 0; i < NVisited.length; i += 1) {\r\n    NList[NVisited[i]].color = '#2ee22e';\r\n  }\r\n  for (let i = 0; i < LVisited.length; i += 1) {\r\n    const line = LMap.get(LVisited[i]);\r\n    if (line !== undefined) {\r\n      line.color = '#2ee22e';\r\n      LMap.set(LVisited[i], line);\r\n    }\r\n  }\r\n  // 지금 방문한 거 색 바꾸기\r\n  if (process.phase === 'visit') {\r\n    if (NTargets.length > 0) {\r\n      NList[NTargets[0]].color = 'orange';\r\n      NList[NTargets[1]].color = 'yellow';\r\n    }\r\n  }\r\n  if (process.phase === 'pop') {\r\n    if (NTargets.length > 0) {\r\n      NList[NTargets[0]].color = 'orange';\r\n    }\r\n  }\r\n  if (process.phase === 'afterVisit') {\r\n    if (NTargets.length > 0) {\r\n      NList[NTargets[0]].color = 'orange';\r\n    }\r\n  }\r\n  const line = LMap.get(process.targetLine);\r\n  if (line !== undefined) {\r\n    line.color = '#ff9400';\r\n    LMap.set(process.targetLine, line);\r\n  }\r\n  return [NList.slice(), LMap];\r\n}\r\n\r\nexport function fixedRendering(nodeList: FixedNode[], lineMap: Map<string, WeightedLine>,\r\n  process: GProcess): [FixedNode[], Map<string, WeightedLine>] {\r\n  const NList = nodeList.slice();\r\n  const LMap = lineMap;\r\n  const NVisited = process.visitedNode;\r\n  const LVisited = process.visitedLine;\r\n  const NTargets = process.targetNodes;\r\n  // 단계를 위한 초기화\r\n  for (let i = 0; i < NList.length; i += 1) {\r\n    NList[i].color = 'grey';\r\n  }\r\n  LMap.forEach((value, key) => {\r\n    const line = LMap.get(key);\r\n    if (line !== undefined) {\r\n      line.color = 'black';\r\n      LMap.set(key, line);\r\n    }\r\n  });\r\n  // 이미 방문된 것들 색 바꿔주기\r\n  for (let i = 0; i < NVisited.length; i += 1) {\r\n    NList[NVisited[i]].color = '#2ee22e';\r\n  }\r\n  if (process.phase === 'compare') {\r\n    const line = LMap.get(process.targetLine);\r\n    if (line !== undefined) {\r\n      line.color = 'orange';\r\n      LMap.set(process.targetLine, line);\r\n    }\r\n    NList[NTargets[0]].color = '#2ee22e';\r\n    NList[NTargets[1]].color = 'orange';\r\n  }\r\n  for (let i = 0; i < LVisited.length; i += 1) {\r\n    const line = LMap.get(LVisited[i]);\r\n    if (line !== undefined) {\r\n      line.color = '#2ee22e';\r\n      LMap.set(LVisited[i], line);\r\n    }\r\n  }\r\n  const line = LMap.get(process.targetLine);\r\n  if (process.phase === 'check') {\r\n    if (line !== undefined) {\r\n      line.color = 'orange';\r\n      LMap.set(process.targetLine, line);\r\n    }\r\n    if (NTargets.length > 0) {\r\n      NList[NTargets[0]].color = 'orange';\r\n      NList[NTargets[1]].color = 'yellow';\r\n    }\r\n  } else if (process.phase === 'connect') {\r\n    if (line !== undefined) {\r\n      line.color = '#2ee22e';\r\n      LMap.set(process.targetLine, line);\r\n    }\r\n    if (NTargets.length > 0) {\r\n      NList[NTargets[0]].color = '#2ee22e';\r\n      NList[NTargets[1]].color = '#2ee22e';\r\n    }\r\n  }\r\n  return [NList.slice(), LMap];\r\n}\r\n","import {\r\n  Node, GProcess, FixedNode, WeightedLine,\r\n} from '../../util';\r\n\r\nexport function bfs(nodeList: Node[]): GProcess[] {\r\n  const visited: boolean[] = new Array<false>(10);\r\n  const process: GProcess[] = [];\r\n  const visitedNode: number[] = [0];\r\n  const visitedLine: string[] = [];\r\n  const q: number[] = new Array<number>(10);\r\n  let targetLine = '';\r\n  const start = 0;\r\n  let front = -1;\r\n  let rear = -1;\r\n  rear += 1;\r\n  q[rear] = start;\r\n  visited[0] = true;\r\n  process.push({\r\n    visitedNode: visitedNode.slice(),\r\n    visitedLine: visitedLine.slice(),\r\n    targetNodes: [],\r\n    targetLine,\r\n    phase: 'start',\r\n    list: q.slice(front + 1, rear + 1),\r\n  });\r\n  while (front !== rear) {\r\n    front += 1;\r\n    const here = q[front];\r\n    const hereNode = nodeList[here];\r\n    process.push({\r\n      visitedNode: visitedNode.slice(),\r\n      visitedLine: visitedLine.slice(),\r\n      targetNodes: [here],\r\n      targetLine: '',\r\n      phase: 'pop',\r\n      list: q.slice(front + 1, rear + 1),\r\n    });\r\n    for (let i = 0; i < hereNode.connected.length; i += 1) {\r\n      const there = hereNode.connected[i];\r\n      if (!visited[there]) {\r\n        visited[there] = true;\r\n        rear += 1;\r\n        q[rear] = there;\r\n        visitedNode.push(there);\r\n        const from = here < there ? here.toString() : there.toString();\r\n        const to = here > there ? here.toString() : there.toString();\r\n        targetLine = from.concat('to').concat(to);\r\n        visitedLine.push(targetLine);\r\n        process.push({\r\n          visitedNode: visitedNode.slice(),\r\n          visitedLine: visitedLine.slice(),\r\n          targetNodes: [here, there],\r\n          targetLine,\r\n          phase: 'visit',\r\n          list: q.slice(front + 1, rear + 1),\r\n        });\r\n      }\r\n    }\r\n  }\r\n  process.push({\r\n    visitedNode,\r\n    visitedLine,\r\n    targetNodes: [],\r\n    targetLine: '',\r\n    phase: 'done',\r\n    list: q.slice(front + 1, rear + 1),\r\n  });\r\n  return process;\r\n}\r\n\r\nexport function dfs(nodeList: Node[]): GProcess[] {\r\n  const process: GProcess[] = [];\r\n  const visitedNode: number[] = [0];\r\n  const visitedLine: string[] = [];\r\n  let targetLine = '';\r\n  const stack: number[][] = [];\r\n  process.push({\r\n    visitedNode: visitedNode.slice(),\r\n    visitedLine: visitedLine.slice(),\r\n    targetNodes: [],\r\n    targetLine,\r\n    phase: 'start',\r\n    list: stack.map((el) => el[1]),\r\n  });\r\n  stack.push([0, 0]);\r\n  visitedNode.push(0);\r\n  process.push({\r\n    visitedNode: visitedNode.slice(),\r\n    visitedLine: visitedLine.slice(),\r\n    targetNodes: [],\r\n    targetLine,\r\n    phase: 'visit',\r\n    list: stack.map((el) => el[1]),\r\n  });\r\n  let now = 0;\r\n  while (stack.length > 0) {\r\n    let flag = true;\r\n    const hereNode = nodeList[now];\r\n    for (let i = 0; i < hereNode.connected.length; i += 1) {\r\n      if (!visitedNode.includes(hereNode.connected[i])) {\r\n        targetLine = now < hereNode.connected[i] ? `${now}to${hereNode.connected[i]}` : `${hereNode.connected[i]}to${now}`;\r\n        process.push({\r\n          visitedNode: visitedNode.slice(),\r\n          visitedLine: visitedLine.slice(),\r\n          targetNodes: [now, hereNode.connected[i]],\r\n          targetLine,\r\n          phase: 'visit',\r\n          list: stack.map((el) => el[1]),\r\n        });\r\n        targetLine = '';\r\n        stack.push([now, hereNode.connected[i]]);\r\n        visitedNode.push(hereNode.connected[i]);\r\n        visitedLine.push(targetLine);\r\n        now = hereNode.connected[i];\r\n        process.push({\r\n          visitedNode: visitedNode.slice(),\r\n          visitedLine: visitedLine.slice(),\r\n          targetNodes: [now, now],\r\n          targetLine,\r\n          phase: 'afterVisit',\r\n          list: stack.map((el) => el[1]),\r\n        });\r\n        flag = false;\r\n        break;\r\n      }\r\n    }\r\n    if (flag) {\r\n      const p = stack.pop();\r\n      if (p !== undefined) {\r\n        const temp = p[0];\r\n        now = temp;\r\n        process.push({\r\n          visitedNode: visitedNode.slice(),\r\n          visitedLine: visitedLine.slice(),\r\n          targetNodes: [now, now],\r\n          targetLine,\r\n          phase: 'pop',\r\n          list: stack.map((el) => el[1]),\r\n        });\r\n      }\r\n    }\r\n  }\r\n  process.push({\r\n    visitedNode: visitedNode.slice(),\r\n    visitedLine: visitedLine.slice(),\r\n    targetNodes: [now, now],\r\n    targetLine,\r\n    phase: 'done',\r\n    list: stack.map((el) => el[1]),\r\n  });\r\n  return process;\r\n}\r\n\r\nexport function dfsR(nodeList: Node[]): GProcess[] {\r\n  const process: GProcess[] = [];\r\n  const visitedNode: number[] = [0];\r\n  const visitedLine: string[] = [];\r\n  let targetLine = '';\r\n  const stack: number[][] = [];\r\n  stack.push([0, 0]);\r\n  process.push({\r\n    visitedNode: visitedNode.slice(),\r\n    visitedLine: visitedLine.slice(),\r\n    targetNodes: [],\r\n    targetLine,\r\n    phase: 'start',\r\n    list: stack.map((el) => el[1]),\r\n  });\r\n  let nowFromTo = stack.pop();\r\n  if (nowFromTo !== undefined) {\r\n    const now = nowFromTo[0];\r\n    visitedNode.push(now);\r\n    for (let i = 0; i < nodeList[now].connected.length; i += 1) {\r\n      stack.push([now, nodeList[now].connected[i]]);\r\n      process.push({\r\n        visitedNode: visitedNode.slice(),\r\n        visitedLine: visitedLine.slice(),\r\n        targetNodes: [0, nodeList[now].connected[i]],\r\n        targetLine,\r\n        phase: 'push',\r\n        list: stack.map((el) => el[1]),\r\n      });\r\n    }\r\n  }\r\n  while (stack.length > 0) {\r\n    nowFromTo = stack.pop();\r\n    process.push({\r\n      visitedNode: visitedNode.slice(),\r\n      visitedLine: visitedLine.slice(),\r\n      targetNodes: [],\r\n      targetLine,\r\n      phase: 'pop',\r\n      list: stack.map((el) => el[1]),\r\n    });\r\n    if (nowFromTo !== undefined) {\r\n      const nowFrom = nowFromTo[0];\r\n      const nowTo = nowFromTo[1];\r\n      visitedNode.push(nowTo);\r\n      targetLine = nowFrom < nowTo ? `${nowFrom}to${nowTo}` : `${nowTo}to${nowFrom}`;\r\n      visitedLine.push(targetLine);\r\n      process.push({\r\n        visitedNode: visitedNode.slice(),\r\n        visitedLine: visitedLine.slice(),\r\n        targetNodes: [nowFrom, nowTo],\r\n        targetLine,\r\n        phase: 'visit',\r\n        list: stack.map((el) => el[1]),\r\n      });\r\n      const hereNode = nodeList[nowTo];\r\n      for (let j = 0; j < hereNode.connected.length; j += 1) {\r\n        if (!visitedNode.includes(hereNode.connected[j])) {\r\n          stack.push([nowTo, hereNode.connected[j]]);\r\n          process.push({\r\n            visitedNode: visitedNode.slice(),\r\n            visitedLine: visitedLine.slice(),\r\n            targetNodes: [nowFrom, nowTo],\r\n            targetLine,\r\n            phase: 'push',\r\n            list: stack.map((el) => el[1]),\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  process.push({\r\n    visitedNode: visitedNode.slice(),\r\n    visitedLine: visitedLine.slice(),\r\n    targetNodes: [],\r\n    targetLine,\r\n    phase: 'done',\r\n    list: stack.map((el) => el[1]),\r\n  });\r\n  return process;\r\n}\r\n\r\nexport function prim(nodeList: FixedNode[], lineMap: Map<string, WeightedLine>,\r\n  start: number): GProcess[] {\r\n  const process: GProcess[] = [];\r\n  const visitedNode: number[] = [start];\r\n  const visitedLine: string[] = [];\r\n  process.push({\r\n    visitedNode: [],\r\n    visitedLine: [],\r\n    targetNodes: [],\r\n    targetLine: '',\r\n    phase: 'start',\r\n    list: [],\r\n  });\r\n  let targetLine = '';\r\n  let here = start;\r\n  const visited: boolean[] = new Array<false>(5);\r\n  visited[here] = true;\r\n  let visitedNum = 1;\r\n  let hereNode = nodeList[here];\r\n  const lineList: WeightedLine[] = [];\r\n  while (visitedNum < 6) {\r\n    hereNode = nodeList[here];\r\n    for (let i = 0; i < hereNode.connected.length; i += 1) {\r\n      const there = hereNode.connected[i];\r\n      const from = here < there ? here.toString() : there.toString();\r\n      const to = here > there ? here.toString() : there.toString();\r\n      targetLine = from.concat('to').concat(to);\r\n      const line = lineMap.get(targetLine);\r\n      if (line !== undefined) {\r\n        lineList.push(line);\r\n      }\r\n    }\r\n    lineList.sort((a, b) => a.weight - b.weight);\r\n    while (lineList.length !== 0) {\r\n      const line = lineList[0];\r\n      lineList.shift();\r\n      if (!visitedLine.includes(line.key)) {\r\n        const from = Number(line.key.charAt(0));\r\n        const to = Number(line.key.charAt(3));\r\n        process.push({\r\n          visitedNode: visitedNode.slice(),\r\n          visitedLine: visitedLine.slice(),\r\n          targetNodes: [from, to],\r\n          targetLine: `${from}to${to}`,\r\n          phase: 'check',\r\n          list: [],\r\n        });\r\n        if (!visited[from] || !visited[to]) {\r\n          const obj1 = visited[from] ? to : from;\r\n          const obj2 = visited[from] ? from : to;\r\n          visited[obj1] = true;\r\n          visitedNum += 1;\r\n          visitedNode.push(obj1);\r\n          visitedLine.push(`${from}to${to}`);\r\n          here = obj1;\r\n          process.push({\r\n            visitedNode: visitedNode.slice(),\r\n            visitedLine: visitedLine.slice(),\r\n            targetNodes: [obj1, obj2],\r\n            targetLine: `${from}to${to}`,\r\n            phase: 'connect',\r\n            list: [],\r\n          });\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return process;\r\n}\r\n\r\nexport function kruskal(nodeList: FixedNode[], lineMap: Map<string, WeightedLine>): GProcess[] {\r\n  const process: GProcess[] = [];\r\n  const list: WeightedLine[] = [];\r\n  const parentArr: number[] = [];\r\n  const visitedNode: Set<number> = new Set<number>();\r\n  const visitedLine: string[] = [];\r\n\r\n  process.push({\r\n    visitedNode: [],\r\n    visitedLine: [],\r\n    targetNodes: [],\r\n    targetLine: '',\r\n    phase: 'start',\r\n    list: [],\r\n  });\r\n\r\n  function findParent(child: number): number {\r\n    if (child === parentArr[child]) return child;\r\n    parentArr[child] = findParent(parentArr[child]);\r\n    return parentArr[child];\r\n  }\r\n\r\n  function isAllSameParent(parentList: number[]): boolean {\r\n    const parent: number = findParent(parentList[0]);\r\n    let result = true;\r\n    for (let i = 1; i < parentList.length; i += 1) {\r\n      if (parent !== findParent(parentList[i])) {\r\n        result = false;\r\n        break;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function isSameGroup(child1: number, child2: number): boolean {\r\n    return findParent(child1) === findParent(child2);\r\n  }\r\n\r\n  function unionGroup(child1: number, child2: number): void {\r\n    const parent1 = findParent(child1);\r\n    const parent2 = findParent(child2);\r\n\r\n    parentArr[parent1] = parent2;\r\n  }\r\n\r\n\r\n  lineMap.forEach((value) => {\r\n    list.push(value);\r\n  });\r\n\r\n  list.sort((item1: WeightedLine, item2: WeightedLine) => {\r\n    if (item1.weight > item2.weight) return 1;\r\n    if (item1.weight === item2.weight) return 0;\r\n    return -1;\r\n  });\r\n  for (let i = 0; i < nodeList.length; i += 1) {\r\n    parentArr.push(i);\r\n  }\r\n  for (let i = 0; i < list.length; i += 1) {\r\n    if (isAllSameParent(parentArr)) {\r\n      // 종료\r\n      break;\r\n    }\r\n    // 현재 간선 표시 (current)\r\n    process.push({\r\n      visitedNode: Array.from(visitedNode), visitedLine: visitedLine.slice(), targetNodes: [list[i].to, list[i].from], targetLine: list[i].key, phase: 'check', list: [],\r\n    });\r\n    if (!isSameGroup(list[i].to, list[i].from)) {\r\n      unionGroup(list[i].to, list[i].from);\r\n      // 간선 색 표시 (enable)\r\n      visitedNode.add(list[i].to);\r\n      visitedNode.add(list[i].from);\r\n      visitedLine.push(list[i].key);\r\n      process.push({\r\n        visitedNode: Array.from(visitedNode), visitedLine: visitedLine.slice(), targetNodes: [list[i].to, list[i].from], targetLine: list[i].key, phase: 'connect', list: [],\r\n      });\r\n    }\r\n  }\r\n  return process;\r\n}\r\n\r\nexport function dijkstra(nodeList: FixedNode[], lineMap: Map<string, WeightedLine>,\r\n  from: number): GProcess[] {\r\n  const process: GProcess[] = [];\r\n  const table: number[][] = [];\r\n  const visited: boolean[] = new Array<boolean>(nodeList.length);\r\n  const nowMinTo: number[] = new Array<number>(nodeList.length);\r\n  const visitedNode: number[] = [];\r\n  const visitedLine: string[] = [];\r\n  let targetLine = '';\r\n  process.push({\r\n    visitedNode: visitedNode.slice(),\r\n    visitedLine: visitedLine.slice(),\r\n    targetNodes: [],\r\n    targetLine,\r\n    phase: 'start',\r\n    list: [],\r\n  });\r\n  for (let i = 0; i < nodeList.length; i += 1) {\r\n    nowMinTo[i] = 999999;\r\n    visited[i] = false;\r\n  }\r\n  nowMinTo[from] = 0;\r\n  let now = from;\r\n  visited[now] = true;\r\n\r\n  visitedNode.push(now);\r\n  process.push({\r\n    visitedNode: visitedNode.slice(),\r\n    visitedLine: visitedLine.slice(),\r\n    targetNodes: [now, now],\r\n    targetLine,\r\n    phase: 'visit',\r\n    list: [],\r\n  });\r\n\r\n  table.push(nowMinTo.slice());\r\n  const flag = true;\r\n  while (flag) {\r\n    const connection = nodeList[now].connected;\r\n    for (let i = 0; i < connection.length; i += 1) {\r\n      if (!visited[connection[i]]) {\r\n        const lineKey = now < connection[i] ? `${now}to${connection[i]}` : `${connection[i]}to${now}`;\r\n\r\n        nowMinTo[connection[i]] = Math.min(nowMinTo[connection[i]]\r\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n          , (nowMinTo[now] + lineMap.get(lineKey)!.weight));\r\n\r\n        targetLine = lineKey;\r\n        process.push({\r\n          visitedNode: visitedNode.slice(),\r\n          visitedLine: visitedLine.slice(),\r\n          targetNodes: [now, connection[i]],\r\n          targetLine,\r\n          phase: 'compare',\r\n          list: nowMinTo.slice(),\r\n        });\r\n      }\r\n    }\r\n    let nowMin = 1000000;\r\n    let finish = true;\r\n    let next = -1;\r\n    for (let i = 0; i < nodeList.length; i += 1) {\r\n      if (!visited[i]) {\r\n        if (nowMinTo[i] <= nowMin) {\r\n          finish = false;\r\n          nowMin = nowMinTo[i];\r\n          next = i;\r\n        }\r\n      }\r\n    }\r\n    table.push(nowMinTo.slice());\r\n    if (finish) {\r\n      break;\r\n    } else {\r\n      now = next;\r\n\r\n      visitedNode.push(now);\r\n      visited[now] = true;\r\n      process.push({\r\n        visitedNode: visitedNode.slice(),\r\n        visitedLine: visitedLine.slice(),\r\n        targetNodes: [now, now],\r\n        targetLine,\r\n        phase: 'visit',\r\n        list: nowMinTo.slice(),\r\n      });\r\n    }\r\n  }\r\n  process.push({\r\n    visitedNode: visitedNode.slice(),\r\n    visitedLine: visitedLine.slice(),\r\n    targetNodes: [],\r\n    targetLine,\r\n    phase: 'done',\r\n    list: nowMinTo.slice(),\r\n  });\r\n  return process;\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\r\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\r\n\r\nimport GraphNodes from './GraphNodes';\r\nimport { Node, Line, GProcess } from '../../util';\r\nimport { makeGraph, rendering, search } from './UtilFunction';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n// speed와 playing을 전역변수로 만든 이유는 함수안에서 선언하면 클로져 때문에 값을 도중에 바꿀 수가 없기 때문.\r\nlet playing = false;\r\nlet speed = 1000;\r\n\r\n// 소팅 알고리즘의 현재 진행 정도를 저장해 놓는 변수.\r\nlet wholeSearchProcess: GProcess[];\r\n// 소팅 알고리즘 상태를 기억하는 배열의 길이 변수화.\r\nlet processLength: number;\r\nlet initialization = false;\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction GraphView(info: any): JSX.Element {\r\n  const pathName = info.location.pathname.substr(1);\r\n  const classes = useStyles();\r\n  const [toggle, setToggle] = useState(false);\r\n  const data = makeGraph('normal');\r\n  const [graphNodes, setGraphNodes] = useState<Node[]>(data[0]);\r\n  const [graphLines, setGraphLines] = useState<Map<string, Line>>(data[1]);\r\n  const [list, setList] = useState<number[]>([]);\r\n\r\n  if (graphNodes !== undefined) {\r\n    if (initialization) {\r\n      wholeSearchProcess = search(graphNodes, pathName);\r\n      processLength = wholeSearchProcess.length;\r\n    }\r\n  }\r\n\r\n  const [nowDepth, setNowDepth] = useState<number>(0);\r\n  const [nowPlaying, setNowPlaying] = useState<boolean>(playing);\r\n  // 소팅 알고리즘의 모든 상태를 순서대로 기억하는 배열 [앞으로, 뒤로, 멈춤, 재생]을 가능하게 해주는 놈.\r\n  function setDepth(depth: number): void {\r\n    if (depth <= processLength - 1) {\r\n      setNowDepth(depth);\r\n    }\r\n  }\r\n  // 소팅 알고리즘의 특정 부분으로 이동해주는 함수.\r\n  function goTo(depth: number): void {\r\n    initialization = false;\r\n    // stop이 눌러졌는지 확인.\r\n    if (playing) {\r\n      // 상태기억 배열의 길이를 벗어하는 depth가 들어왔는지 확인.\r\n      if (depth < processLength && depth > -1) {\r\n        // 현재 depth 저장.\r\n        setDepth(depth);\r\n        const temp = rendering(graphNodes, graphLines, wholeSearchProcess[depth]);\r\n        setGraphNodes(temp[0]);\r\n        setGraphLines((temp[1]));\r\n        setList(wholeSearchProcess[depth].list);\r\n      }\r\n    }\r\n  }\r\n\r\n  // 랜덤 번호 생성 함수. 처음 렌더링 할때 과정을 함수에 저장함.\r\n  function makeRandomNumber(density = 'normal'): void {\r\n    const temp = makeGraph(density);\r\n    setGraphNodes(temp[0]);\r\n    setGraphLines(temp[1]);\r\n    setDepth(0);\r\n    initialization = true;\r\n  }\r\n\r\n  // 멈추는 함수.\r\n  function stop(): void {\r\n    playing = false;\r\n    setNowPlaying(playing);\r\n    initialization = false;\r\n  }\r\n\r\n  // 멈춤 flag를 해제하는 함수.(진행하는 함수 아니고 멈춤을 해제하는거임)\r\n  function play(): void {\r\n    if (processLength === undefined) {\r\n      wholeSearchProcess = search(graphNodes, 'bfs');\r\n      processLength = wholeSearchProcess.length;\r\n    }\r\n    playing = true;\r\n    setNowPlaying(playing);\r\n  }\r\n  // 재귀를 이용해 goTo()함수를 연속적으로 호출하는 함수.\r\n  const flow = (depth: number): void => {\r\n    // stop 버튼이 눌러지면 정지.\r\n    if (playing) {\r\n      goTo(depth);\r\n      // 끝났는지 체크.\r\n      if (depth < processLength - 1) {\r\n        // setTimeout()을 전역변수 speed 만큼 걸고 재귀적으로 flow함수를 호출.\r\n        setTimeout(() => {\r\n          flow(depth + 1);\r\n        }, speed);\r\n      } else {\r\n        // 끝났으면 멈춤 플래그 설정.\r\n        stop();\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => (): void => {\r\n    function init(): void {\r\n      playing = false;\r\n      setNowPlaying(playing);\r\n      initialization = false;\r\n    }\r\n    init();\r\n  }, []);\r\n\r\n  // 다른 화면으로 넘어갈 때는 초기화\r\n  if (!playing) {\r\n    initialization = true;\r\n  }\r\n  return (\r\n    <div\r\n      style={{\r\n        height: '700px',\r\n      }}\r\n    >\r\n      <div style={{\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'center',\r\n      }}\r\n      >\r\n        {/* 이동에 관한 함수는 stop상태에서만 조작할 수 있음 == (if (!playing)) */}\r\n        <Button className={classes.button} size=\"medium\" onClick={(): void => { if (!playing) { play(); goTo(0); stop(); initialization = true; } }}>시작으로 가기</Button>\r\n        <IconButton aria-label=\"skipPrevious\" onClick={(): void => { if (!playing) { play(); goTo(nowDepth - 1); stop(); } }}>\r\n          <SkipPreviousIcon />\r\n        </IconButton>\r\n        <IconButton aria-label=\"playAndPause\" onClick={(): void => { if (!playing) { play(); flow(nowDepth); initialization = true; } else { stop(); initialization = true; } }}>\r\n          {(!nowPlaying || initialization)\r\n            && <PlayArrowIcon />}\r\n          {(nowPlaying && !initialization)\r\n            && <PauseIcon />}\r\n        </IconButton>\r\n        <IconButton aria-label=\"skipNext\" onClick={(): void => { if (!playing) { play(); goTo(nowDepth + 1); stop(); } }}>\r\n          <SkipNextIcon />\r\n        </IconButton>\r\n        {!toggle && <Button className={classes.button} size=\"medium\" onClick={(): void => { if (!toggle) { setToggle(true); } else { setToggle(false); } }}>그래프생성</Button>}\r\n        {toggle\r\n          && (\r\n            <div>\r\n              <Button className={classes.button} color=\"primary\" size=\"medium\" onClick={(): void => { makeRandomNumber('low'); stop(); }}>듬성하게</Button>\r\n              <Button className={classes.button} color=\"primary\" size=\"medium\" onClick={(): void => { makeRandomNumber('normal'); stop(); }}>중간</Button>\r\n              <Button className={classes.button} color=\"primary\" size=\"medium\" onClick={(): void => { makeRandomNumber('high'); stop(); }}>촘촘하게</Button>\r\n            </div>\r\n          )}\r\n        <Button className={classes.button} size=\"medium\" onClick={(): void => { if (speed < 2000) { speed += 100; } }}>느리게</Button>\r\n        <Button className={classes.button} size=\"medium\" onClick={(): void => { if (speed > 100) { speed -= 100; } }}>빠르게</Button>\r\n      </div>\r\n      <div style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n      }}\r\n      >\r\n        <GraphNodes\r\n          graphNodes={graphNodes}\r\n          graphLines={Array.from(graphLines.values())}\r\n          list={list}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default GraphView;\r\n","import React from 'react';\r\nimport { FixedNode, WeightedLine } from '../../util';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction FixedGraphNodes({ graphNodes, graphLines, list }: any): JSX.Element {\r\n  const nodes = graphNodes.map((node: FixedNode) => (\r\n    <g key={node.key}>\r\n      <circle cx={node.x + window.innerWidth / 3} cy={node.y + window.innerHeight / 5} r=\"30\" stroke=\"black\" strokeWidth=\"1\" fill={node.color} key={node.key} />\r\n      <text x={node.x + window.innerWidth / 3} y={node.y + window.innerHeight / 5} textAnchor=\"middle\" stroke=\"white\" dy=\".4em\" key={`text${node.key}`}>{node.key}</text>\r\n    </g>\r\n  ));\r\n  const nowMin = list.map((minimum: number, i: number) => (\r\n    <text\r\n      x={graphNodes[i].x + window.innerWidth / 3 - 10}\r\n      y={graphNodes[i].y + window.innerHeight / 5 - 40}\r\n      textAnchor=\"middle\"\r\n      stroke=\"red\"\r\n      dy=\".1em\"\r\n      // eslint-disable-next-line react/no-array-index-key\r\n      key={i}\r\n    >\r\n      {minimum !== 999999 ? minimum : '∞'}\r\n    </text>\r\n  ));\r\n  const lines = graphLines.map((line: WeightedLine) => (\r\n    <g key={line.key}>\r\n      <line\r\n        x1={graphNodes[line.from].x + window.innerWidth / 3}\r\n        y1={graphNodes[line.from].y + window.innerHeight / 5}\r\n        x2={graphNodes[line.to].x + window.innerWidth / 3}\r\n        y2={graphNodes[line.to].y + window.innerHeight / 5}\r\n        style={{\r\n          stroke: line.color,\r\n          strokeWidth: 2,\r\n          zIndex: 1,\r\n        }}\r\n        key={line.key}\r\n        textRendering={line.weight}\r\n      />\r\n      <text\r\n        x={((graphNodes[line.from].x + window.innerWidth / 3)\r\n          + (graphNodes[line.to].x + window.innerWidth / 3)) / 2 + 20}\r\n        y={((graphNodes[line.from].y + window.innerHeight / 5)\r\n          + (graphNodes[line.to].y + window.innerHeight / 5)) / 2 - 20}\r\n        textAnchor=\"middle\"\r\n        stroke=\"black\"\r\n        dy=\".4em\"\r\n      >\r\n        {line.weight}\r\n      </text>\r\n    </g>\r\n  ));\r\n  return (\r\n    <div>\r\n      <svg height=\"900\" width={window.innerWidth}>\r\n        {lines}\r\n        {nodes}\r\n        {nowMin}\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\nexport default FixedGraphNodes;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\r\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\r\n\r\nimport FixedGraphNodes from './FixedGraphNodes';\r\nimport { FixedNode, WeightedLine, GProcess } from '../../util';\r\nimport { makeFixedGraph, fixedRendering, find } from './UtilFunction';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n// speed와 playing을 전역변수로 만든 이유는 함수안에서 선언하면 클로져 때문에 값을 도중에 바꿀 수가 없기 때문.\r\nlet playing = false;\r\nlet speed = 1000;\r\n\r\n// 소팅 알고리즘의 현재 진행 정도를 저장해 놓는 변수.\r\nlet wholeSearchProcess: GProcess[];\r\n// 소팅 알고리즘 상태를 기억하는 배열의 길이 변수화.\r\nlet processLength: number;\r\nlet initialization = false;\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction FixedGraphView(info: any): JSX.Element {\r\n  const pathName = info.location.pathname.substr(1);\r\n  const classes = useStyles();\r\n  const [toggle, setToggle] = useState(false);\r\n  const data = makeFixedGraph(0);\r\n  const [graphNodes, setGraphNodes] = useState<FixedNode[]>(data[0]);\r\n  const [graphLines, setGraphLines] = useState<Map<string, WeightedLine>>(data[1]);\r\n  const [list, setList] = useState<number[]>([]);\r\n  if (graphNodes !== undefined) {\r\n    if (initialization) {\r\n      wholeSearchProcess = find(graphNodes, graphLines, 0, pathName);\r\n      processLength = wholeSearchProcess.length;\r\n    }\r\n  }\r\n\r\n  const [nowDepth, setNowDepth] = useState<number>(0);\r\n  const [nowPlaying, setNowPlaying] = useState<boolean>(playing);\r\n  // 소팅 알고리즘의 모든 상태를 순서대로 기억하는 배열 [앞으로, 뒤로, 멈춤, 재생]을 가능하게 해주는 놈.\r\n  function setDepth(depth: number): void {\r\n    if (depth <= processLength - 1) {\r\n      setNowDepth(depth);\r\n    }\r\n  }\r\n  // 소팅 알고리즘의 특정 부분으로 이동해주는 함수.\r\n  function goTo(depth: number): void {\r\n    initialization = false;\r\n    // stop이 눌러졌는지 확인.\r\n    if (playing) {\r\n      // 상태기억 배열의 길이를 벗어하는 depth가 들어왔는지 확인.\r\n      if (depth < processLength && depth > -1) {\r\n        // 현재 depth 저장.\r\n        setDepth(depth);\r\n        const temp = fixedRendering(graphNodes, graphLines, wholeSearchProcess[depth]);\r\n        setGraphNodes(temp[0]);\r\n        setGraphLines((temp[1]));\r\n        setList(wholeSearchProcess[depth].list);\r\n      }\r\n    }\r\n  }\r\n\r\n  // 랜덤 번호 생성 함수. 처음 렌더링 할때 과정을 함수에 저장함.\r\n  function makeRandomNumber(type: number): void {\r\n    const temp = makeFixedGraph(type);\r\n    setGraphNodes(temp[0]);\r\n    setGraphLines(temp[1]);\r\n    setDepth(0);\r\n    initialization = true;\r\n  }\r\n\r\n  // 멈추는 함수.\r\n  function stop(): void {\r\n    playing = false;\r\n    setNowPlaying(playing);\r\n    initialization = false;\r\n  }\r\n\r\n  // 멈춤 flag를 해제하는 함수.(진행하는 함수 아니고 멈춤을 해제하는거임)\r\n  function play(): void {\r\n    if (processLength === undefined) {\r\n      wholeSearchProcess = find(graphNodes, graphLines, 0, pathName);\r\n      processLength = wholeSearchProcess.length;\r\n    }\r\n    playing = true;\r\n    setNowPlaying(playing);\r\n  }\r\n  // 재귀를 이용해 goTo()함수를 연속적으로 호출하는 함수.\r\n  const flow = (depth: number): void => {\r\n    // stop 버튼이 눌러지면 정지.\r\n    if (playing) {\r\n      goTo(depth);\r\n      // 끝났는지 체크.\r\n      if (depth < processLength - 1) {\r\n        // setTimeout()을 전역변수 speed 만큼 걸고 재귀적으로 flow함수를 호출.\r\n        setTimeout(() => {\r\n          flow(depth + 1);\r\n        }, speed);\r\n      } else {\r\n        // 끝났으면 멈춤 플래그 설정.\r\n        stop();\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => () => {\r\n    function init(): void {\r\n      playing = false;\r\n      setNowPlaying(playing);\r\n      initialization = false;\r\n    }\r\n    init();\r\n  }, []);\r\n  // 다른 화면으로 넘어갈 때는 초기화\r\n  if (!playing) {\r\n    initialization = true;\r\n  }\r\n  return (\r\n    <div\r\n      style={{\r\n        height: '700px',\r\n      }}\r\n    >\r\n      <div style={{\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'center',\r\n      }}\r\n      >\r\n        {/* 이동에 관한 함수는 stop상태에서만 조작할 수 있음 == (if (!playing)) */}\r\n        <Button className={classes.button} size=\"medium\" onClick={(): void => { if (!playing) { play(); goTo(0); stop(); initialization = true; } }}>시작으로 가기</Button>\r\n        <IconButton aria-label=\"skipPrevious\" onClick={(): void => { if (!playing) { play(); goTo(nowDepth - 1); stop(); } }}>\r\n          <SkipPreviousIcon />\r\n        </IconButton>\r\n        <IconButton aria-label=\"playAndPause\" onClick={(): void => { if (!playing) { play(); flow(nowDepth); initialization = true; } else { stop(); initialization = true; } }}>\r\n          {(!nowPlaying || initialization)\r\n            && <PlayArrowIcon />}\r\n          {(nowPlaying && !initialization)\r\n            && <PauseIcon />}\r\n        </IconButton>\r\n        <IconButton aria-label=\"skipNext\" onClick={(): void => { if (!playing) { play(); goTo(nowDepth + 1); stop(); } }}>\r\n          <SkipNextIcon />\r\n        </IconButton>\r\n        {!toggle && <Button className={classes.button} size=\"medium\" onClick={(): void => { if (!toggle) { setToggle(true); } else { setToggle(false); } }}>그래프생성</Button>}\r\n        {toggle\r\n          && (\r\n            <div>\r\n              <Button className={classes.button} color=\"primary\" size=\"medium\" onClick={(): void => { makeRandomNumber(0); stop(); }}>1</Button>\r\n              <Button className={classes.button} color=\"primary\" size=\"medium\" onClick={(): void => { makeRandomNumber(0); stop(); }}>2</Button>\r\n              <Button className={classes.button} color=\"primary\" size=\"medium\" onClick={(): void => { makeRandomNumber(0); stop(); }}>3</Button>\r\n            </div>\r\n          )}\r\n        <Button className={classes.button} size=\"medium\" onClick={(): void => { if (speed < 2000) { speed += 100; } }}>느리게</Button>\r\n        <Button className={classes.button} size=\"medium\" onClick={(): void => { if (speed > 100) { speed -= 100; } }}>빠르게</Button>\r\n      </div>\r\n      <div style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n      }}\r\n      >\r\n        <FixedGraphNodes\r\n          graphNodes={graphNodes}\r\n          graphLines={Array.from(graphLines.values())}\r\n          list={list}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default FixedGraphView;\r\n","import React from 'react';\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Main from '../Main';\r\nimport SortView from '../Component/Sort/SortView';\r\nimport HSort from '../Component/Sort/HeapSort';\r\nimport GraphView from '../Component/Graph/GraphView';\r\nimport FixedGraphView from '../Component/Graph/FixedGraphView';\r\n\r\nfunction Routes(): JSX.Element {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Main} />\r\n        <Route path=\"/BSort\" component={SortView} />\r\n        <Route path=\"/ISort\" component={SortView} />\r\n        <Route path=\"/SSort\" component={SortView} />\r\n        <Route path=\"/MSort\" component={SortView} />\r\n        <Route path=\"/QSort\" component={SortView} />\r\n        <Route path=\"/HSort\" component={HSort} />\r\n        <Route path=\"/bfs\" component={GraphView} />\r\n        <Route path=\"/dfs\" component={GraphView} />\r\n        <Route path=\"/prim\" component={FixedGraphView} />\r\n        <Route path=\"/kruskal\" component={FixedGraphView} />\r\n        <Route path=\"/dijkstra\" component={FixedGraphView} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\nexport default Routes;\r\n","import React from 'react';\r\nimport Footer from './Footer';\r\nimport Routes from './Router/Routes';\r\n\r\nfunction App(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <Routes />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n            + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void{\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && !contentType.includes('javascript'))\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}